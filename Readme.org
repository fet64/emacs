#+TITLE: Fet64's Emacs Configuration File
#+AUTHOR: Fet64
#+email: fet64@outlook.com
#+language: en
#+options: ':t toc:nil author:t email:t num:nil
#+startup: content indent
#+PROPERTY: header-args+ :tangle "~/.config/emacs/init.el"
#+PROPERTY: header-args+ :mkdirp yes
 
This is a work in progress...

* Intruduction/How to use
To tangle this file into =early-init.el= and =init.el= in the emacs-user-directory:
#+begin_src emacs-lisp :tangle no
(org-babel-tangle)
#+end_src

After you have created =early-init.el= and =init.el= you need to copy all the snippets from
this git directory to =~/.config/emacs/snippets/= directory.

You can do that by running (C-c C-c) in this code block:

#+begin_src sh :tangle no :results none
  cp -rvp snippets ~/.config/emacs/

#+end_src


* Early-init.el

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
	;;; early-init.el --- Fet64's early-init.el file
	;;; Commentary:
	;;; Code:

	(setq package-enable-at-startup nil)

	;; Garbage collections
	(setq gc-cons-percentage 0.6)

	;; Compile warnings
	(setq warning-minimum-level :emergency)
	(setq native-comp-async-report-warnings-errors 'silent)
	(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

	;; Misc optimizations
	(setq idle-update-delay 1.0)
	(setq-default bidi-display-reordering 'left-to-right
				  bidi-paragraph-direction 'left-to-right)

	(setq-default cursor-in-non-selected-windows nil)
	(setq highlight-nonselected-windows nil)
	(setq fast-but-imprecise-scrolling t)
	(setq inhibit-compacting-font-caches t)

	;;; early-init.el ends here

#+end_src

* MacOS Keyboard Configuration
#+begin_src emacs-lisp
  (setq mac-command-modifier   'meta
	mac-option-modifier         nil
	mac-control-modifier       'control
	mac-right-command-modifier 'super
	mac-right-control-modifier 'hyper)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Elpaca Package Manager

[[https://github.com/progfolio/elpaca]]
|------------------------------------+--------------------+--------------------------------------------------|
| Operation                          | Keys               | Commmands                                        |
|------------------------------------+--------------------+--------------------------------------------------|
| Finding packages                   | M-x elpaca-manager | elpaca-try                                       |
| Trying packages                    | i x                | elpaca-try                                       |
| Fetching package updates           | f x                | elpaca-fetch or elpaca-fetch-all                 |
| Merging updates                    | u x                | elpaca-merge or elpaca-merge-all                 |
| Pulling updates                    | Cu u x             | C-u M-x elpaca-merge or C-u M-x elpaca-merge-all |
| Rebuilding packages                | r x                | elpaca-rebuild                                   |
| Deleting packages                  | d x                | elpaca-delete                                    |
| View package logs                  | l                  | elpaca-log                                       |
| View package statuses              | t                  | elpaca-status                                    |
| Visit package repository directory | v                  | elpaca-visit                                     |
| Visit package build directory      | C-u v              | C-u M-x elpaca-visit                             |
| Browse package website             | b                  | elpaca-browse                                    |
|------------------------------------+--------------------+--------------------------------------------------|



#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                :ref nil
                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
     (build (expand-file-name "elpaca/" elpaca-builds-directory))
     (order (cdr elpaca-order))
     (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
           ((zerop (call-process "git" nil buffer t "clone"
                     (plist-get order :repo) repo)))
           ((zerop (call-process "git" nil buffer t "checkout"
                     (or (plist-get order :ref) "--"))))
           (emacs (concat invocation-directory invocation-name))
           ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                     "--eval" "(byte-recompile-directory \".\" 0 'force)")))
           ((require 'elpaca))
           ((elpaca-generate-autoloads "elpaca" repo)))
          (progn (message "%s" (buffer-string)) (kill-buffer buffer))
        (error "%s" (with-current-buffer buffer (buffer-string))))
    ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
      (elpaca-use-package-mode)
      (setq elpaca-use-package-by-default t))
  (elpaca-wait)

#+end_src

* Garbage Collections and Collector
#+begin_src emacs-lisp 
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold (* 16 1024 1024)) ; 16mb
    (gcmh-mode 1)
    )

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-percentage 0.1)))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))


#+end_src

* All the icons
[[https://github.com/domtronn/all-the-icons.el]]

#+begin_src emacs-lisp 
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* Avy
#+begin_src emacs-lisp 

  (use-package avy
    :defer t
    :config
    (setq avy-case-fold-search nil))

#+end_src
* Backups, history and trash
By default, Emacs saves backup files in the current directory. These are files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.config/emacs/backups/, where I can find them with find-file if I really need to.

#+begin_src emacs-lisp 
  ;; Backup
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))

  ;; History
  (setq savehist-file "~/.config/emacs/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
		'(kill-ring
		  search-ring
		  regexp-search-ring))

  ;; Trash
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

  ;; recent files
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

#+end_src

* Clipboard
#+begin_src emacs-lisp 

    (use-package simpleclip
      :config (simpleclip-mode 1))

#+end_src
* Company
#+begin_src emacs-lisp 
  (use-package company
	:defer 2
	:diminish
	:custom
	(company-begin-commands '(self-insert-command))
	(company-idle-delay .1)
	(company-minimum-prefix-length 2)
	(company-show-numbers t)
	(company-tooltip-align-annotations 't)
	(global-company-mode t))

  (use-package company-box
	:after company
	:diminish
	:hook (company-mode . company-box-mode))

#+end_src

* Counsel
#+begin_src emacs-lisp 

  (use-package counsel
    :diminish
    :config
    (counsel-mode))

#+end_src
* Doom theme and modeline
Doom themes: [[https://github.com/doomemacs/themes]]

Doom modeline: [[https://github.com/seagle0128/doom-modeline]]

#+begin_src emacs-lisp 
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-solarized-light t)
    ;;(doom-themes-neotree-config)
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
	  doom-modeline-bar-width 5
	  doom-modeline-persp-name t
	  doom-modeline-persp-icon t))

#+end_src

* Embark
#+BEGIN_SRC emacs-lisp
  ;; TODO install and setup
#+END_SRC

* Highlight todo
#+begin_src emacs-lisp  

  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          '(("TODO" warning bold)
            ("FIXME" error bold)
            ("HACK" font-lock-constant-face bold)
            ("REVIEW" font-lock-constant-face bold)
            ("NOTE" success bold)
            ("DEPRECATED" font-lock-doc-face bold))))

#+end_src
* ELFEED
#+begin_src emacs-lisp  

  (use-package elfeed
    :config
    (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (("https://www.reddit.com/r/linux.rss" reddit linux)
                        ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                        ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                        ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                        ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                        ("https://hackaday.com/blog/feed/" hackaday linux)
                        ("https://opensource.com/feed" opensource linux)
                        ("https://linux.softpedia.com/backend.xml" softpedia linux)
                        ("https://itsfoss.com/feed/" itsfoss linux)
                        ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                        ("https://www.phoronix.com/rss.php" phoronix linux)
                        ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                        ("https://www.computerworld.com/index.rss" computerworld linux)
                        ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                        ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                        ("https://betanews.com/feed" betanews linux)
                        ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                        ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
 

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

#+end_src
* Evil mode
[[https://github.com/emacs-evil/evil]]

#+begin_src emacs-lisp 
  (use-package evil
	 :init
	 (setq evil-want-integration t
		evil-want-keybinding nil
		evil-vsplit-window-right t
		evil-split-window-below t
		evil-undo-system 'undo-redo)
	 (evil-mode 1))

   (use-package evil-collection
	 :after evil
	 :config
	 (add-to-list 'evil-collection-mode-list 'help)
	 (evil-collection-init))

  (with-eval-after-load 'evil-maps
	(define-key evil-motion-state-map (kbd "SPC") nil)
	(define-key evil-motion-state-map (kbd "RET") nil)
	(define-key evil-motion-state-map (kbd "TAB") nil))

  (setq org-return-follows-link t)

#+end_src

* Eshell
#+begin_src emacs-lisp  

  (use-package eshell-toggle
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (setq eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src
* General

#+begin_src emacs-lisp 
    (use-package general
      :config
      (general-evil-setup)

      (general-create-definer fet/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "C-SPC") ;; access leader in insert mode

      (fet/leader-keys
       "SPC" '(counsel-M-x :wk "M-x")
       "." '(find-file :wk "Find file")
       "u" '(universal-argument :wk "Universal argument")
       "TAB TAB" '(comment-line :wk "Comment lines")
       "i" '(ibuffer :wk "Ibuffer")
       "d" '(dired :wk "Dired")
       "T" '(org-babel-tangle :wk "org-babel-tangle")
       "E" '(org-export-dispatch :wk "Export dispatch")
       "m" '(magit-status :wk "Magit status")
       "S" '(yas-insert-snippet :wk "Insert yasnippet")
       "," '(fet-config-command :wk "Options")

       )

      (fet/leader-keys
        "b" '(nil :wk "Bookmarks/Buffers")
        "b b" '(switch-to-buffer :wk "Switch to buffer") ;; TODO fix error
        "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
        "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
        "b d" '(bookmark-delete :wk "Delete bookmark")
        "b i" '(ibuffer :wk "Ibuffer")
        "b k" '(kill-current-buffer :wk "Kill current buffer")
        "b K" '(kill-some-buffers :wk "Kill multiple buffers")
        "b l" '(list-bookmarks :wk "List bookmarks")
        "b m" '(bookmark-set :wk "Set bookmark") ;; TODO fix error
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Prev buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b R" '(rename-buffer :wk "Rename buffer")
        "b s" '(basic-save-buffer :wk "Save buffer")
        "b S" '(save-some-buffers :wk "Save multiple buffers")
        "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")
        )

      (fet/leader-keys
        "d" '(nil :wk "Dired")
        "d d" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current")
        "d n" '(neotree-dir :wk "Open directory in neotree")
        )

      (fet/leader-keys
        "e" '(nil :wk "Eshell/Evaluate")
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate defun containing or after point")
        "e e" '(eval-expression :wk "Evaluate an elisp expression")
        "e h" '(counsel-esh-history :wk "Eshell history")
        "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
        "e r" '(eval-region :wk "Evaluate elisp in region")
        "e R" '(eww-reload :wk "Reload current page in EWW")
        "e s" '(eshell :wk "Eshell") ;; TODO fix emacs mode in eshell not evil
        "e w" '(eww :wk "EWW emacs web broswer")
        )

      (fet/leader-keys
        "f" '(nil :wk "Files")
        "f c" '((lambda () (interactive) (find-file "~/dev/emacs/Readme.org")) :wk "Open Readme.org")
        "f d" '(find-grep-dired :wk "Search for string in files in DIR")
        "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
        "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
        "f l" '(counsel-locate :wk "Locate a file")
        "f s" '((lambda () (interactive) (find-file "~/dev/emacs/snippets/")) :wk "Dired snippets directory")
        "f r" '(counsel-recentf :wk "Find recent files")
        "f u" '(sudo-edit-find-file :wk "Sudo find file")
        "f U" '(sudo-edit :wk "Sudo edit file")
        )

      (fet/leader-keys
        "g" '(nil :wk "Git")
        "g d" '(magit-dispatch :wk "Magit dispatch")
        "g ." '(magit-file-disatch :wk "Magit file dispatch")
        "g b" '(magit-branch-checkout :wk "Switch branch")
        "g c" '(nil :wk "Create")
        "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
        "g c c" '(magit-commit-create : "Create commit")
        "g c f" '(magit-commit-fixup :wk "Create fixup commit")
        "g C" '(magit-clone :wk "Clone repo")
        "g f" '(nil :wk "Find")
        "g f c" '(magit-show-commit :wk "Show commit")
        "g f f" '(magit-find-file :wk "Magit find file")
        "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
        "g F" '(magit-fetch :wk "Git fetch")
        "g g" '(magit-status :wk "Magit status")
        "g i" '(magit-init :wk "Initialize git repo")
        "g l" '(magit-log-buffer-file :wk "Magit buffer log")
        "g r" '(vc-revert :wk "Git revert file")
        "g s" '(magit-stage-file :wk "Git stage file")
        "g t" '(git-timemachine :wk "Git time machine")
        "g u" '(magit-unstage-file :wk "Git unstage file")
        )

      (fet/leader-keys
        "h" '(nil :wk "Help")
        "h a" '(counsel-apropos :wk "Apropos")
        "h b" '(counsel-bindings :wk "Desc. bindings")
        "h c" '(describe-char :wk "Desc. char under cursor")
        "h d" '(nil :wk "Emaccs documentation")
        "h d a" '(about-emacs :wk "About Emacs")
        "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
        "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
        "h d m" '(info-emacs-manual :wk "The Emacs manual")
        "h d n" '(view-emacs-news :wk "View Emacs news")
        "h d o" '(describe-distribution :wk "How to obtain Emacs")
        "h d p" '(view-emacs-problems :wk "View Emacs problems")
        "h d t" '(view-emacs-todo :wk "View Emacs todo")
        "h d w" '(describe-no-warranty :wk "Describe no warranty")
        "h e" '(view-echo-area-messages :wk "View echo area messages")
        "h f" '(describe-function :wk "Desc. function")
        "h F" '(describe-face :wk "Desc. face")
        "h g" '(describe-gnu-project :wk "Desc. GNU Project")
        "h i" '(info :wk "Info")
        "h I" '(describe-input-method :wk "Desc. input method")
        "h k" '(describe-key :wk "Desc. key")
        "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
        "h L" '(describe-language-environment :wk "Desc. language environment")
        "h m" '(describe-mode :wk "Desc. mode")
        "h t" '(fet/themes-hydra/body :wk "Change theme")
        "h v" '(describe-variable :wk "Desc. variable")
        "h w" '(where-is :wk "Prints keybinding for command if set")
        "h x" '(describe-command :wk "Display full documentation for command")
        )

      (fet/leader-keys
        "m" '(nil :wk "Org")
        "m a" '(org-agenda :wk "Org agenda")
        "m e" '(org-export-dispatch :wk "Org export dispatch")
        "m i" '(org-toggle-item :wk "Org toggle item")
        "m t" '(org-todo :wk "Org todo")
        "m T" '(org-babel-tangle :wk "Org babel tangle")
        "m l" '(org-todo-list :wk "Org todo list")
        "m b" '(nil :wk "Tables")
        "m b -" '(org-table-insert-hline :wk "Insert hline in table")
        "m d" '(nil :wk "Date/deadline")
        "m d t" '(org-time-stamp :wk "Org time stamp")
        )

      (fet/leader-keys
        "o" '(nil :wk "Open")
        "o e" '(elfeed :wk "Elfeed RSS")
        "o f" '(make-frame :wk "Open buffer in new frame")
        "o F" '(select-frame-by-name :wk "Select frame by name")
        )

      (fet/leader-keys
        "p" '(projectile-command-map :wk "Projectile")
        )

      (fet/leader-keys
        "s" '(nil :wk "Search")
        "s d" '(dictionary-search :wk "Search dictionary")
        "s m" '(man :wk "Man pages")
        "s o" '(pdf-occur :wk "Pdf search lines matching STRING")
        "s t" '(tldr :wk "Lookup TLDR docs for a command")
        )

      (fet/leader-keys
        "t" '(nil :wk "Toggle")
        "t e" '(eshell-toggle :wk "Toggle eshell")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
        "t o" '(org-mode :wk "Toggle org mode")
        "t r" '(rainbow-mode :wk "Toggle rainbow mode")
        "t t" '(visual-line-mode :wk "Toggle truncated lines")
        )

      (fet/leader-keys
        "w" '(nil :wk "Windows/Words")
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(evil-window-new :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window")
        "w d" '(downcase-word :wk "Downcase word")
        "w u" '(upcase-word :wk "Upcase word")
        "w =" '(count-words :wk "Count words/lines for buffer")
        )
      (general-def
        :keymaps 'override
        ;; Emacs
        "M-x" 'counsel-M-x
        "s-x" 'execute-extended-command
        "s-b" 'counsel-switch-buffer ; super-b
        ;; Editing
        "M-v" 'simpleclip-paste
        "M-V" 'evil-paste-after ; shift-paste uses the internal clipboard
        "M-c" 'simpleclip-copy
        ;; Utility
        "C-c c" 'org-capture
        "C-c a" 'org-agenda
        "C-s" 'swiper
        "M-=" 'count-words
        "M-j" 'avy-goto-char-2
        )

      ) 

  ;; end of general-define-key
#+end_src
* Hydras
[[https://github.com/abo-abo/hydra]]

#+begin_src emacs-lisp 
#+end_src
* Ivy, counsel
#+begin_src emacs-lisp 
  ;; (use-package counsel
  ;;   :after ivy
  ;;   :diminish
  ;;   :config
  ;;   (counsel-mode)
  ;;   (setq ivy-initial-inputs-alist nil))

  ;; (use-package ivy
  ;;   :bind
  ;;   (("C-c C-r" . ivy-resume)
  ;;    ("C-x B" . ivy-switch-buffer-other-window))
  ;;   :diminish
  ;;   :custom
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq ivy-count-format "(%d/%d) ")
  ;;   (setq enable-recursive-minibuffers t)
  ;;   :config
  ;;   (ivy-mode))

  ;; (use-package all-the-icons-ivy-rich
  ;;   :ensure t
  ;;   :init (all-the-icons-ivy-rich-mode 1))

  ;; (use-package ivy-rich
  ;;   :after ivy
  ;;   :init
  ;;   (setq ivy-rich-path-style 'abbrev)
  ;;   (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  ;;   :config
  ;;   (ivy-rich-mode 1))
#+end_src

* LaTeX
#+begin_src emacs-lisp  

  (setq org-latex-listings t)
  (setq org-latex-compiler "xelatex")
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{extarticle}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  )
#+end_src

* Load local scripts
#+begin_src emacs-lisp 
  (add-to-list 'load-path "~/.config/emacs/scripts/")
  (require 'buffer-move)

#+end_src

* Magit
Magit is a complete text-based user interface to Git.
[[https://magit.vc]]

A very good writeup to get you started using Magit: [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git]]

#+begin_src emacs-lisp 
  (use-package transient)
  (use-package magit)

  (use-package git-timemachine
    :after git-timemachine
    :hook (evil-normalize-keymaps . git-timemachine-hook)
    :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
    )
#+end_src

* Misc Packages
#+begin_src emacs-lisp 
  (use-package ace-window :defer t)
  (use-package restart-emacs :defer t)
  (use-package diminish)
  (use-package reveal-in-osx-finder :commands (reveal-in-osx-finder))

  #+end_src

* Neotree
#+begin_src emacs-lisp 
  (use-package neotree
	:config
	(setq neo-smart-open t
		  neo-show-hidden-files t
		  neo-window-width 55
		  neo-window-fixed-size nil
		  inhibit-compacting-font-caches t
		  projectile-switch-project-action 'neotree-projectile-action)
	(add-hook 'neo-after-create-hook
			  #'(lambda (_)
				  (with-current-buffer (get-buffer neo-buffer-name)
					(setq truncate-lines t)
					(setq word-wrap nil)
					(make-local-variable 'auto-hscroll-mode)
					(setq auto-hscroll-mode nil)))))

#+end_src

* Orderless
#+begin_src emacs-lisp 
  (use-package orderless
	:ensure t
	:custom
	(completion-styles '(orderless basic))
	(completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

* Org
#+begin_src emacs-lisp
      (require 'org-tempo)

      (use-package org-bullets)
      (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)))

      ;(require 'org-make-toc)
      (use-package org-make-toc)

      (use-package ox-reveal
        :defer 5)

     ;; HTML-specific
    (setq org-html-validation-link nil) ;; No validation button on HTML exports

    ;; LaTeX Specific
    (eval-after-load 'ox
      '(add-to-list
        'org-export-filter-timestamp-functions
        'org-export-filter-timestamp-remove-brackets)
      )

  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq
     ;; org-modern-star '("●" "○" "✸" "✿")
     org-modern-star '( "⌾" "✸" "◈" "◇")
     org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
     org-modern-tag nil
     org-modern-priority nil
     org-modern-todo nil
     org-modern-table nil))

  (use-package org-super-agenda
    :after org
    :config
    (setq org-super-agenda-header-map nil)
    (add-hook 'org-agenda-mode-hook #'(lambda () (setq-local nobreak-char-display-nil)))
    (org-super-agenda-mode))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell .t)))
#+end_src

* PDF
#+begin_src emacs-lisp  

    (use-package pdf-tools
  :defer t
  ;;:pin manual
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-loader-install)
  (setq-default pdf-view-display-size 'fit-height)
  (setq pdf-view-contiuous nil)
  (setq pdf-view-midnight-colors '("#ffffff" . "#121212" ))
  :general
  (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
                      "j" 'pdf-view-next-page
                      "k" 'pdf-view-previous-page
                      "C-j" 'pdf-view-next-line-or-next-page
                      "C-k" 'pdf-view-previous-line-or-previous-page
                      (kbd "<down>") 'pdf-view-next-line-or-next-page
                      (kbd "<up>") 'pdf-view-previous-line-or-previous-page
                      (kbd "<left>") 'image-backward-hscroll
                      (kbd "<right>") 'image-forward-hscroll
                      "H" 'pdf-view-fit-height-to-window
                      "0" 'pdf-view-fit-height-to-window
                      "W" 'pdf-view-fit-width-to-window
                      "+" 'pdf-view-enlarge
                      "-" 'pdf-view-shrink
                      "q" 'quit-window
                      "Q" 'kill-this-buffer
                      "g" 'revert-buffer
                      "C-s" 'isearch-forward
                      )
)

#+end_src
* Projectile
#+begin_src emacs-lisp 
  (use-package projectile
	:ensure t
	:init
	(projectile-mode +1)
	:bind
	(:map projectile-mode-map
		  ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map)))

#+end_src

* Rainbow mode
#+begin_src emacs-lisp  

  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)

  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))

#+end_src
* Registers
#+begin_src emacs-lisp 
  (setq register-preview-delay 0)
  (set-register ?C (cons 'file "~/dev/emacs/Readme.org"))
  (set-register ?G (cons 'file "~/dev/emacs/.gitignore"))

#+end_src

* Sane defaults
#+begin_src emacs-lisp 
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)             ;; I like having access to the menu-bar

  (delete-selection-mode 1)     ;; You can select text and delete it by typing
  (electric-indent-mode 1)      ;; Turn off the weird indenting that Emacs does by default
  (electric-pair-mode -1)       ;; turns on the automatic parens pairing, I don't like it

  (global-auto-revert-mode t)   ;; Automatically show changes if the file has changed
  (global-display-line-numbers-mode 1)
  (setq-default display-line-numbers-width 3)
  (global-visual-line-mode t)   ;; Enable truncated lines
  (setq org-edit-src-content-indentation 2) ;; Set src block automatic indent to 2 (which is the default)

  ;; INTERACTION
  (setq use-short-answers t)    ;; y or n suffice when emacs asks for yes or no
  (setq confirm-kill-emacs 'yes-or-no-p)  ;; confirm to quit
  (setq initial-major-mode 'org-mode
    initial-scratch-message ""
    initial-buffer-choice t)

  ;; Window
  (setq frame-resize-pixelwise t)
  (setq ns-pop-up-frames nil)
  (setq window-resize-pixelwise nil)
  ;;(setq split-width-threshold 80)

  ;; Lines
  (setq-default truncate-lines t)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (setq line-move-visual t)

  ;; BELL/WARNING
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; SCROLLING
  (setq scroll-conservatively 101)
  (setq mouse-wheel-follow-mouse 't
        mouse-wheel-progressive-speed nil)
  (setq mac-redisplay-dont-reset-vscroll t
        mac-mouse-wheel-smooth-scroll nil)

  (setq what-cursor-show-names t) ;; improves C-x =

  ;; DIRED
  (setq dired-kill-when-opening-new-dired-buffer t)

  ;; MacOS stuff
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))
#+end_src

* Saving customizations
I don't want saved customizations in my init.el file.
Ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html]]

#+begin_src emacs-lisp 
  (setq custom-file "~/.config/emacs/emacs-custom.el")
  (load custom-file)

#+end_src

* Scripts
#+begin_src emacs-lisp  

  (defun fet/duplicate-line ()
    "Duplicate current line"
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))

  (global-set-key (kbd "C-S-d") 'fet/duplicate-line)
#+end_src
* Sudo Edit
#+begin_src emacs-lisp  

  (use-package sudo-edit)

#+end_src
* TLDR
#+begin_src emacs-lisp  

  (use-package tldr)

#+end_src
* Transient stuff
#+BEGIN_SRC emacs-lisp
  (require 'transient)

  (transient-define-prefix fet-config-command ()
    "Config options"
    [["Configuration files"
      ("r" "Edit emacs config file" (lambda () (interactive) (
                                                  (lambda () (interactive) (find-file "~/dev/emacs/Readme.org"))
                                                  )))
      ("c" "Copy snippets" (lambda () (interactive) (
                                                     message "hello"
                                                     )))
      ("g" "Git status" (lambda () (interactive) (magit-status)))]

     ["Theme options"
      ("1" "doom-solarized-light" (lambda () (interactive) (
                                                            load-theme 'doom-solarized-light
                                                            )))
      ("2" "doom-solarized-dark" (lambda () (interactive) (
                                                           load-theme 'doom-solarized-dark
                                                           )))]
     ])

  (fet-config-command)
#+END_SRC
* Vertico
#+begin_src emacs-lisp  

  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-count 20)
    (setq vertico-resize t)
    (setq vertico-cycle t)
    (keymap-set vertico-map "?" #'minibuffer-completion-help)
    (keymap-set vertico-map "M-RET" #'minibuffer-force-complete-and-exit)
    (keymap-set vertico-map "M-TAB" #'minibuffer-complete)

  )

  (use-package marginalia
    :bind
    (:map minibuffer-local-map ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
 #+end_src
* Which-key
[[https://github.com/justbur/emacs-which-key]]

#+begin_src emacs-lisp 
  (use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.5
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))

#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :defer 5
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
    (yas-global-mode 1))

  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+end_src
