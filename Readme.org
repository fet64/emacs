#+TITLE: Fet64's Emacs Configuration File
:PROPERTIES:
#+AUTHOR: Fet64
#+email: fet64@outlook.com
#+language: en
#+options: ':t toc:t author:t email:t num:nil
#+STARTUP: overview
#+PROPERTY: header-args+ :tangle "~/.config/emacs/init.el"
#+PROPERTY: header-args+ :mkdirp yes
:END:

This is a work in progress...

* Do this first - How to use
To tangle this file into =early-init.el= and =init.el= in the emacs-user-directory. You can do that by running (C-c C-c) in this code block:
#+ATTR-LATEX: :options minted
#+begin_src emacs-lisp :tangle no 
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell .t)))

  (org-babel-tangle)
#+end_src

#+CAPTION: Results from evaluating the elisp code to generate =early-init.el= and =init.el=.
#+RESULTS:
| ~/.config/emacs/init.el | ~/.config/emacs/early-init.el |

After you have tangled =early-init.el= and =init.el= you need to copy all supporting code from this git
to where you have your emacs config, usually =~/.config/emacs/=.


You can do that by running (C-c C-c) in this code block:
#+begin_src sh :tangle no

  cp -rvp snippets ~/.config/emacs/
  cp -rvp scripts ~/.config/emacs/
  cp -rvp emacs-custom.el ~/.config/emacs/
  cp -rvp images ~/.config/emacs/

#+end_src

#+CAPTION: Results from running copying supporting files.
#+RESULTS:
| snippets                              | -> | /Users/au/.config/emacs/snippets                              |
| snippets/org-mode                     | -> | /Users/au/.config/emacs/snippets/org-mode                     |
| snippets/org-mode/org_src_block       | -> | /Users/au/.config/emacs/snippets/org-mode/org_src_block       |
| snippets/org-mode/org_elisp_src_block | -> | /Users/au/.config/emacs/snippets/org-mode/org_elisp_src_block |
| scripts                               | -> | /Users/au/.config/emacs/scripts                               |
| scripts/buffer-move.el                | -> | /Users/au/.config/emacs/scripts/buffer-move.el                |
| emacs-custom.el                       | -> | /Users/au/.config/emacs/emacs-custom.el                       |
| images                                | -> | /Users/au/.config/emacs/images                                |
| images/emacs.png                      | -> | /Users/au/.config/emacs/images/emacs.png                      |

You can now restart Emacs. It will take some time to download all the packages and compile them. You may also need to accept that the theme can run elisp code. When done, restart again and your up and running this config.


* Start
** Early-init.el
#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  ;;; early-init.el --- Fet64's early-init.el file
  ;;; Commentary: auto generated (tangled) from Readme.org
  ;;; Code:

  (setq package-enable-at-startup nil)

  ;; Garbage collections
  (setq gc-cons-percentage 0.6)

  ;; Compile warnings
  (setq warning-minimum-level :emergency)
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Misc optimizations
  (setq idle-update-delay 1.0)
  (setq-default bidi-display-reordering 'left-to-right
				bidi-paragraph-direction 'left-to-right)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  ;; This makes the Aqua titlebar color the same as Emacs
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;; Remove icon in Aqua titlebar
  (setq ns-use-proxy-icon nil)
  ;; Remove fram title from Aqua titlebar
  (setq frame-title-format nil)

  ;;; early-init.el ends here

#+end_src

** Header in init.el
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Fet64's init.el
  ;;; Commentary: auto generated (tangled) from Readme.org
  ;;; Code:
#+END_SRC
** Package Management
#+BEGIN_SRC emacs-lisp
  (setq warning-suppress-log-types '((package reinitialization)))
  (package-initialize)
  (unless (assoc-default "melpa" package-archives)
	  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

	(unless (assoc-default "nongnu" package-archives)
	  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))

	(unless (package-installed-p 'use-package)
	  (package-install 'use-package))
	(setq use-package-verbose t)
	(setq use-package-always-ensure t)
	(require 'use-package)
	(use-package quelpa)
	(use-package quelpa-use-package)
	(quelpa-use-package-activate-advice)
	(use-package auto-compile
	  :config (auto-compile-on-load-mode))
	(setq load-prefer-newer t)

  (use-package async
	:config
	(setq async-bytecomp-package-mode 1))
#+END_SRC
** Garbage Collections and Collector
[[https://github.com/emacsmirror/gcmh]]

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold (* 16 1024 1024)) ; 16mb
    (gcmh-mode 1)
    )

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-percentage 0.1)))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))


#+end_src

** Load system path variables
#+BEGIN_SRC emacs-lisp :tangle "~/.config/emacs/early-init.el"
  (exec-path)
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
#+END_SRC
* Files, registers and variables
** My variables
#+BEGIN_SRC emacs-lisp
  ;;; fet-variables
  ;; File and directory locations
  (defvar fet/home (concat (getenv "HOME") "/") "My home directory.")
  (defvar fet/emacs (concat fet/home ".config/emacs/") "Emacs home directory.")
  (setq org-directory (concat fet/home "Org"))
  (defvar fet/emacs-stuff (concat fet/home "emacs-stuff") "Personal emacs files goes here.")
  (defvar fet/scripts (concat user-emacs-directory "scripts"))
  (defvar fet/snippets (concat user-emacs-directory "snippets"))
  (defvar fet/images (concat user-emacs-directory "images"))
  (defvar fet/backups (concat user-emacs-directory "backups"))
  (defvar fet/auto-save-list (concat user-emacs-directory "auto-save-list"))

  ;; Internal variables
  (defvar fet/computer 'macbook "Which computer I am on -- 'macbook or 'linux.")
  (defvar fet-text-height nil "My preferred default text height.")
  (defvar fet-doom-modeline-text-height nil "My preferred modeline text height.")
  (defvar fet-default-line-spacing 0 "Baseline line spacing")
  (setq-default fet-default-line-spacing 0)

  ;;; fet-variables ends here
#+END_SRC
** Load local scripts
#+begin_src emacs-lisp 
  (load (expand-file-name "buffer-move.el" fet/scripts))
#+end_src

** Registers
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html]]

#+begin_src emacs-lisp 
  (setq register-preview-delay 0)
  (set-register ?C (cons 'file "~/dev/emacs/Readme.org"))
  (set-register ?G (cons 'file "~/dev/emacs/.gitignore"))

#+end_src

** Scripts
#+begin_src emacs-lisp  

  (defun fet/duplicate-line ()
	"Duplicate current line"
	(interactive)
	(move-beginning-of-line 1)
	(kill-line)
	(yank)
	(open-line 1)
	(next-line 1)
	(yank))

  (global-set-key (kbd "C-S-d") 'fet/duplicate-line)

  (defun fet/load-theme (theme)
	"Enhance 'load-theme' by first disabling enabled themes (by jake-emacs)"
	(mapc #'disable-theme custom-enabled-themes)
	(load-theme theme t))

  (defun mac-open-file ()
	(interactive)
	(let ((file (do-applescript "POSIX path of (choose file)")))
	  (if (< (length file) 3)
		  (setq file
				(substring file 1 (- (length file) 1))))
	  (if (and (not (equal file "")) (file-readable-p file))
		  (find-file file))))

  (defun mac-save-file-as ()
	(interactive)
	(let ((file (do-applescript "POSIX path of (choose file name with prompt \"Save As...\")")))
	  (if (> (length file) 3)
		  (setq file
				(substring file 1 (- (length file) 1))))
	  (if (not (equal file ""))
		  (write-file file))))
#+end_src
* General configuration
** Sane defaults
*** Disable toolbar and scrollbar, keep menubar
#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)             ;; I like having access to the menu-bar
#+END_SRC
*** Misc settings
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)     ;; You can select text and delete it by typing
  (electric-indent-mode 1)      ;; Turn off the weird indenting that Emacs does by default
  (electric-pair-mode -1)       ;; turns on the automatic parens pairing, I don't like it

  (global-auto-revert-mode t)   ;; Automatically show changes if the file has changed
  (global-display-line-numbers-mode 1)
  (setq-default display-line-numbers-width 5)
  (global-visual-line-mode t)   ;; Enable truncated lines
  (setq org-edit-src-content-indentation 2) ;; Set src block automatic indent to 2 (which is the default)

  ;; INTERACTION
  (setq use-short-answers t)    ;; y or n suffice when emacs asks for yes or no
  (setq confirm-kill-emacs 'yes-or-no-p)  ;; confirm to quit
  (setq initial-major-mode 'org-mode
    initial-scratch-message ""
    initial-buffer-choice t)

  ;; Window
  (setq frame-resize-pixelwise t)
  (setq ns-pop-up-frames nil)
  (setq window-resize-pixelwise nil)
  ;;(setq split-width-threshold 80)

  ;; Lines
  (setq-default truncate-lines t)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (setq line-move-visual t)

  ;; BELL/WARNING
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; SCROLLING
  (setq scroll-conservatively 101)
  (setq mouse-wheel-follow-mouse 't
        mouse-wheel-progressive-speed nil)
  (setq mac-redisplay-dont-reset-vscroll t
        mac-mouse-wheel-smooth-scroll nil)

  (setq what-cursor-show-names t) ;; improves C-x =

  ;; DIRED
  (setq dired-kill-when-opening-new-dired-buffer t)

  ;; MacOS stuff
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))
#+end_src

** Backups, recent files, history and trash
By default, Emacs saves backup files in the current directory. These are files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.config/emacs/backups/, where I can find them with find-file if I really need to.
*** Backups
#+begin_src emacs-lisp 
  ;; Backup
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))
#+END_SRC
*** History
#+BEGIN_SRC emacs-lisp
  ;; History
  (setq savehist-file "~/.config/emacs/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
		'(kill-ring
		  search-ring
		  regexp-search-ring))
#+END_SRC
*** Trash
#+BEGIN_SRC emacs-lisp
  ;; Trash
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)
#+END_SRC
*** Recent files
#+BEGIN_SRC emacs-lisp
  ;; recent files
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src

** Saving customizations
I don't want saved customizations in my init.el file.
Ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html]]

#+begin_src emacs-lisp 
  (setq custom-file "~/.config/emacs/emacs-custom.el")
  (load custom-file)

#+end_src

* MacOS Configuration and stuff
TODO This config is for mac os only, fix for linux

#+CAPTION: Mac keyboard bindings:
|---------------+--------------------------------------------|
| key-binding   | Does what                                  |
|---------------+--------------------------------------------|
| ⌘ + o         | Open an existing file into an Emacs buffer |
| ⌘ + w         | Discard (kill) current buffer              |
| ⌘ + s         | Save current buffer into its file          |
| ⌘ + S         | Write curent buffer into another file      |
| ⌘ + q         | Save buffer and kill Emacs                 |
| ⌘ + c         | Kill ring save (copy selected)             |
| ⌘ + v         | Yank (paste)                               |
| ⌘ + x         | Kill region (cut)                          |
| ⌘ + a         | Sellect all                                |
| ⌘ + z         | Undo                                       |
| ⌘ + f         | Search for a string (isearch)              |
| ⌘ + g         | Search forward for a string                |
| ⌘ + .         | Move to a different window (frame)         |
| ⌘ + l         | Goto line                                  |
| ⌘ + k         | Kill buffer                                |
| ⌘ + m         | Minimize the window                        |
| ⌘ + <up>      | Move point to the beginning of the buffer  |
| ⌘ + <down>    | Move point to the end of the buffer        |
| ⌘ + <left>    | Move point to beginning of current line    |
| ⌘ + <right>   | Move point to end of current line          |
| CTRL + click  | Show contextual menu                       |
| SHIFT + Click | Select region                              |
|---------------+--------------------------------------------|

#+begin_src emacs-lisp

  ;; (setq mac-command-modifier  'meta
  ;;   mac-option-modifier         nil
  ;;   mac-control-modifier       'control
  ;;   mac-right-command-modifier 'super
  ;;   mac-right-control-modifier 'hyper)

  (setq mac-option-modifier 'meta
		mac-command-modifier 'super
		mac-right-option-modifier 'none
		)

  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
  (global-set-key (kbd "s-z") 'undo)
  (global-set-key (kbd "s-f") 'isearch-forward)
  (global-set-key (kbd "s-g") 'isearch-repeat-forward)
  (global-set-key (kbd "s-o") 'mac-open-file)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-S") 'mac-save-file-as)
  ;;(global-set-key (kbd "s-p") 'mac-preview)
  (global-set-key (kbd "s-w") 'kill-buffer)
  (global-set-key (kbd "s-m") 'iconify-frame)
  (global-set-key (kbd "s-q") 'save-buffers-kill-emacs)
  (global-set-key (kbd "s-.") 'keyboard-quit)
  (global-set-key (kbd "s-l") 'goto-line)
  (global-set-key (kbd "s-k") 'kill-buffer)
  (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
  (global-set-key (kbd "s-<down>") 'end-of-buffer)
  (global-set-key (kbd "s-<left>") 'beginning-of-line)
  (global-set-key (kbd "s-<right>") 'end-of-line)
  (global-set-key [(meta down)] 'forward-paragraph)
  (global-set-key [(meta up)] 'backward-paragraph)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Keyboard
** Which-key
[[https://github.com/justbur/emacs-which-key]]

#+begin_src emacs-lisp 
  (use-package which-key
	:diminish which-key-mode
	:init
	(which-key-mode)
	(which-key-setup-minibuffer)
	:config
	(setq which-key-idle-delay 0.3
		  which-key-prefix-prefix " → "
		  which-key-sort-order 'which-key-key-order-alpha
		  which-key-min-display-lines 10
		  which-key-max-display-columns nil))
#+end_src

** Evil mode
[[https://github.com/emacs-evil/evil]]
[[https://github.com/emacs-evil/evil-collection]]

#+begin_src emacs-lisp 
  (use-package evil
	 :init
	 (setq evil-want-integration t
		   evil-want-keybinding nil
		   evil-want-fine-undo t
		   evil-want-Y-yank-to-eol t)
	 :config
	 (evil-set-initial-state 'dashboard-mode 'motion)
	 (evil-set-initial-state 'debugger-mode 'motion)
	 (evil-set-initial-state 'pdf-view-mode 'motion)
	 (evil-set-initial-state 'term-mode 'emacs)
	 (evil-set-initial-state 'calc-mode 'emacs)
	 ;; keybinding
	 (define-key evil-window-map "\C-q" 'evil-delete-buffer)
	 (define-key evil-window-map "\C-w" 'kill-this-buffer)
	 (define-key evil-motion-state-map "\C-b" 'evil-scroll-up)
	 (define-key evil-motion-state-map [?\s-\\] 'evil-execute-in-emacs-state) ;; super-\ TODO change binding for this
	 (evil-mode 1))

  (use-package evil-surround
	:after evil
	:defer 2
	:config
	(global-evil-surround-mode 1))

  (with-eval-after-load 'evil-maps
	(evil-define-key 'motion help-mode-map "q" 'kill-this-buffer)
	(evil-define-key 'motion calendar-mode-map "q" 'kill-this-buffer)
	(define-key evil-motion-state-map (kbd "SPC") nil)
	(define-key evil-motion-state-map (kbd "RET") nil)
	(define-key evil-motion-state-map (kbd "TAB") nil))

#+end_src

** General
[[https://github.com/noctuid/general.el]]

#+begin_src emacs-lisp 
	(use-package general
	  :config
	  (general-evil-setup)

	  (general-create-definer fet/leader-keys
		:states '(normal insert visual emacs)
		:keymaps 'override
		:prefix "SPC"
		:global-prefix "C-SPC") ;; access leader in insert mode

	  (fet/leader-keys
	   "SPC" '(counsel-M-x :wk "M-x")
	   "." '(find-file :wk "Find file")
	   "u" '(universal-argument :wk "Universal argument")
	   "TAB TAB" '(comment-line :wk "Comment lines")
	   "i" '(ibuffer :wk "Ibuffer")
	   "d" '(dired :wk "Dired")
	   "T" '(org-babel-tangle :wk "org-babel-tangle")
	   "E" '(org-export-dispatch :wk "Export dispatch")
	   "m" '(magit-status :wk "Magit status")
	   "S" '(yas-insert-snippet :wk "Insert yasnippet")
	   "," '(fet-config-command :wk "Options")

	   )

	  (fet/leader-keys
		"b" '(nil :wk "Bookmarks/Buffers")
		"b b" '(switch-to-buffer :wk "Switch to buffer") ;; TODO fix error
		"b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
		"b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
		"b d" '(bookmark-delete :wk "Delete bookmark")
		"b i" '(ibuffer :wk "Ibuffer")
		"b k" '(kill-current-buffer :wk "Kill current buffer")
		"b K" '(kill-some-buffers :wk "Kill multiple buffers")
		"b l" '(list-bookmarks :wk "List bookmarks")
		"b m" '(bookmark-set :wk "Set bookmark") ;; TODO fix error
		"b n" '(next-buffer :wk "Next buffer")
		"b p" '(previous-buffer :wk "Prev buffer")
		"b r" '(revert-buffer :wk "Reload buffer")
		"b R" '(rename-buffer :wk "Rename buffer")
		"b s" '(basic-save-buffer :wk "Save buffer")
		"b S" '(save-some-buffers :wk "Save multiple buffers")
		"b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")
		"b P" '(lpr-buffer :wk "Print buffer")
		)

	  (fet/leader-keys
		"d" '(nil :wk "Dired")
		"d d" '(dired :wk "Open dired")
		"d j" '(dired-jump :wk "Dired jump to current")
		"d n" '(neotree-dir :wk "Open directory in neotree")
		)

	  (fet/leader-keys
		"e" '(nil :wk "Eshell/Evaluate")
		"e b" '(eval-buffer :wk "Evaluate elisp in buffer")
		"e d" '(eval-defun :wk "Evaluate defun containing or after point")
		"e e" '(eval-expression :wk "Evaluate an elisp expression")
		"e h" '(counsel-esh-history :wk "Eshell history")
		"e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
		"e r" '(eval-region :wk "Evaluate elisp in region")
		"e R" '(eww-reload :wk "Reload current page in EWW")
		"e s" '(eshell :wk "Eshell") ;; TODO fix emacs mode in eshell not evil
		"e w" '(eww :wk "EWW emacs web broswer")
		)

	  (fet/leader-keys
		"f" '(nil :wk "Files")
		"f c" '((lambda () (interactive) (find-file "~/dev/emacs/Readme.org")) :wk "Open Readme.org")
		"f d" '(find-grep-dired :wk "Search for string in files in DIR")
		"f g" '(counsel-grep-or-swiper :wk "Search for string current file")
		"f j" '(counsel-file-jump :wk "Jump to a file below current directory")
		"f l" '(counsel-locate :wk "Locate a file")
		"f s" '((lambda () (interactive) (find-file "~/dev/emacs/snippets/")) :wk "Dired snippets directory")
		"f r" '(counsel-recentf :wk "Find recent files")
		"f u" '(sudo-edit-find-file :wk "Sudo find file")
		"f U" '(sudo-edit :wk "Sudo edit file")
		)

	  (fet/leader-keys
		"g" '(nil :wk "Git")
		"g d" '(magit-dispatch :wk "Magit dispatch")
		"g ." '(magit-file-disatch :wk "Magit file dispatch")
		"g b" '(magit-branch-checkout :wk "Switch branch")
		"g c" '(nil :wk "Create")
		"g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
		"g c c" '(magit-commit-create : "Create commit")
		"g c f" '(magit-commit-fixup :wk "Create fixup commit")
		"g C" '(magit-clone :wk "Clone repo")
		"g f" '(nil :wk "Find")
		"g f c" '(magit-show-commit :wk "Show commit")
		"g f f" '(magit-find-file :wk "Magit find file")
		"g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
		"g F" '(magit-fetch :wk "Git fetch")
		"g g" '(magit-status :wk "Magit status")
		"g i" '(magit-init :wk "Initialize git repo")
		"g l" '(magit-log-buffer-file :wk "Magit buffer log")
		"g r" '(vc-revert :wk "Git revert file")
		"g s" '(magit-stage-file :wk "Git stage file")
		"g t" '(git-timemachine :wk "Git time machine")
		"g u" '(magit-unstage-file :wk "Git unstage file")
		)

	  (fet/leader-keys
		"h" '(nil :wk "Help")
		"h a" '(counsel-apropos :wk "Apropos")
		"h b" '(counsel-bindings :wk "Desc. bindings")
		"h c" '(describe-char :wk "Desc. char under cursor")
		"h d" '(nil :wk "Emaccs documentation")
		"h d a" '(about-emacs :wk "About Emacs")
		"h d d" '(view-emacs-debugging :wk "View Emacs debugging")
		"h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
		"h d m" '(info-emacs-manual :wk "The Emacs manual")
		"h d n" '(view-emacs-news :wk "View Emacs news")
		"h d o" '(describe-distribution :wk "How to obtain Emacs")
		"h d p" '(view-emacs-problems :wk "View Emacs problems")
		"h d t" '(view-emacs-todo :wk "View Emacs todo")
		"h d w" '(describe-no-warranty :wk "Describe no warranty")
		"h e" '(view-echo-area-messages :wk "View echo area messages")
		"h f" '(describe-function :wk "Desc. function")
		"h F" '(describe-face :wk "Desc. face")
		"h g" '(describe-gnu-project :wk "Desc. GNU Project")
		"h i" '(info :wk "Info")
		"h I" '(describe-input-method :wk "Desc. input method")
		"h k" '(describe-key :wk "Desc. key")
		"h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
		"h L" '(describe-language-environment :wk "Desc. language environment")
		"h m" '(describe-mode :wk "Desc. mode")
		"h t" '(fet-hydra-theme-switcher/body :wk "Change theme")
		"h v" '(describe-variable :wk "Desc. variable")
		"h w" '(where-is :wk "Prints keybinding for command if set")
		"h x" '(describe-command :wk "Display full documentation for command")
		)

	  (fet/leader-keys
		"m" '(nil :wk "Org")
		"m a" '(org-agenda :wk "Org agenda")
		"m e" '(org-export-dispatch :wk "Org export dispatch")
		"m i" '(org-toggle-item :wk "Org toggle item")
		"m t" '(org-todo :wk "Org todo")
		"m T" '(org-babel-tangle :wk "Org babel tangle")
		"m l" '(org-todo-list :wk "Org todo list")
		"m b" '(nil :wk "Tables")
		"m b -" '(org-table-insert-hline :wk "Insert hline in table")
		"m d" '(nil :wk "Date/deadline")
		"m d t" '(org-time-stamp :wk "Org time stamp")
		)

	  (fet/leader-keys
		"o" '(nil :wk "Open")
		"o e" '(elfeed :wk "Elfeed RSS")
		"o f" '(make-frame :wk "Open buffer in new frame")
		"o F" '(select-frame-by-name :wk "Select frame by name")
		)

	  (fet/leader-keys
		"p" '(projectile-command-map :wk "Projectile")
		)

	  (fet/leader-keys
		"s" '(nil :wk "Search")
		"s d" '(dictionary-search :wk "Search dictionary")
		"s m" '(man :wk "Man pages")
		"s o" '(pdf-occur :wk "Pdf search lines matching STRING")
		"s t" '(tldr :wk "Lookup TLDR docs for a command")
		)

	  (fet/leader-keys
		"t" '(nil :wk "Toggle")
		"t e" '(eshell-toggle :wk "Toggle eshell")
		"t l" '(display-line-numbers-mode :wk "Toggle line numbers")
		"t n" '(neotree-toggle :wk "Toggle neotree file viewer")
		"t o" '(org-mode :wk "Toggle org mode")
		"t r" '(rainbow-mode :wk "Toggle rainbow mode")
		"t t" '(visual-line-mode :wk "Toggle truncated lines")
		)

	  (fet/leader-keys
		"w" '(nil :wk "Windows/Words")
		"w c" '(evil-window-delete :wk "Close window")
		"w n" '(evil-window-new :wk "New window")
		"w s" '(evil-window-split :wk "Horizontal split window")
		"w v" '(evil-window-vsplit :wk "Vertical split window")
		"w h" '(evil-window-left :wk "Window left")
		"w j" '(evil-window-down :wk "Window down")
		"w k" '(evil-window-up :wk "Window up")
		"w l" '(evil-window-right :wk "Window right")
		"w w" '(evil-window-next :wk "Goto next window")
		"w d" '(downcase-word :wk "Downcase word")
		"w u" '(upcase-word :wk "Upcase word")
		"w =" '(count-words :wk "Count words/lines for buffer")
		"w t" '(nil :wk "Thesaurus")
		"w t p" '(mw-thesaurus-lookup-at-point :wk "Lookup word at point")
		"w t m" '(mw-thesaurus-mode :wk "Merriam-Webster minor mode")
		"w t l" '(mw-thesaurus-lookup :wk "Lookup word")
		)
	  (general-def
		:keymaps 'override
		;; Emacs
		"M-x" 'counsel-M-x
		"s-x" 'execute-extended-command
		"s-b" 'counsel-switch-buffer ; super-b
		;; Editing
		"M-v" 'simpleclip-paste
		"M-V" 'evil-paste-after ; shift-paste uses the internal clipboard
		"M-c" 'simpleclip-copy
		;; Utility
		"C-c c" 'org-capture
		"C-c a" 'org-agenda
		"C-s" 'swiper
		"M-=" 'count-words
		"M-j" 'avy-goto-char-2
		)

	  ) 

  ;; end of general-define-key
#+end_src
** Hydras
[[https://github.com/abo-abo/hydra]]

The :color key is a shortcut. It aggregates :exit and :foreign-keys key in the following way:

#+CAPTION: Color keys for hydra.
|----------+----------------------------|
| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys-warn :exit t |
| pink     | :foreign-keys run          |
|----------+----------------------------|



#+begin_src emacs-lisp 
  (use-package hydra)

  (defhydra hydra-zoom (global-map "<f2>")
            "zoom"
            ("g" text-scale-increase "in")
            ("l" text-scale-decrease "out"))

  (defhydra hydra-buffer-menu (:color pink :hint nil)
    "
  ^Mark^            ^Unmark^           ^Actions^          ^Search
  ^^^^^^^-----------------------------------------------------------------
  _m_: mark         _u_: unmark        _x_: executre       _R_: re-isearch
  _s_: save         _U_: unmark up     _b_: bury           _I_: isearch
  _d_: delete       ^ ^                _g_: refresh        _O_: multi-occur
  _D_: delete up    ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  _~_: modified
  "
    ("m" Buffer-menu-mark)
    ("u" Buffer-menu-unmark)
    ("U" Buffer-menu-backup-unmark)
    ("d" Buffer-menu-delete)
    ("D" Buffer-menu-delete-backward)
    ("s" Buffer-menu-save)
    ("~" Buffer-menu-not-modified)
    ("x" Buffer-menu-execute)
    ("b" Buffer-menu-bury)
    ("g" revert-buffer)
    ("T" Buffer-menu-toggle-files-only)
    ("O" Buffer-menu-multi-occur :color blue)
    ("I" Buffer-menu-isearch-buffers :color blue)
    ("R" Buffer-menu-isearch-buffers-regexp :color blue)
    ("c" nil "cancel")
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)
    ("q" quit-window "quit" :color blue))

  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)

  (defhydra fet-hydra-theme-switcher (:hint nil)
    "
       Dark             ^Light^
  -------------------------------------------
  _1_ one               _z_ one-light
  _2_ vivendi           _x_ operandi
  _3_ molokai           _c_ solarized-light
  _4_ snazzy            _v_ flatwhite
  _5_ old-hope          _b_ tomorrow-day
  _6_ henna                 ^
  _7_ peacock               ^
  _8_ monokai-machine       ^
  _9_ xcode                 ^
  _q_ quit                  ^
  ^                         ^
  "
    ;; Dark
    ("1" (fet/load-theme 'doom-one) "one")
    ("2" (fet/load-theme 'modus-vivendi) "modus-vivendi")
    ("3" (fet/load-theme 'doom-molokai) "molokai")
    ("4" (fet/load-theme 'doom-snazzy) "snazzy")
    ("5" (fet/load-theme 'doom-old-hope) "old-hope")
    ("6" (fet/load-theme 'doom-henna) "henna")
    ("7" (fet/load-theme 'doom-peacock) "peacock")
    ("8" (fet/load-theme 'doom-monokai-machine) "monokai-machine")
    ("9" (fet/load-theme 'doom-xcode) "xcode")

    ;; Light
    ("z" (fet/load-theme 'doom-one-light) "one-light")
    ("x" (fet/load-theme 'modus-operandi) "modus-operandi")
    ("c" (fet/load-theme 'doom-solarized-light) "solarized-light")
    ("v" (fet/load-theme 'doom-flatwhite) "flatwhite")
    ("b" (fet/load-theme 'doom-opera-light) "tomorrow-day")

    ;; Exit
    ("q" nil))
#+end_src
* Interaction and editing files
** Company
[[https://github.com/company-mode/company-mode]]
[[https://github.com/sebastiencs/company-box]]

#+begin_src emacs-lisp 
  (use-package company
	:diminish company-mode
	:general
	(general-define-key :keymaps 'company-active-map
						"C-j" 'company-select-next
						"C-k" 'company-select-previous)
	:init
	(add-hook 'after-init-hook 'global-company-mode)
	(setq company-minimum-prefix-length 2
		  company-tooltip-limit 14
		  company-tooltip-align-annotations t
		  company-require-match 'never
		  company-global-modes '(not erc-mode message-mode help-mode gud-mode)
		  company-frontends '(company-pseudo-tooltip-frontend
							  company-echo-metadata-frontend)
		  company-backends '(company-capf company-files company-keywords)
		  company-insertion-on-trigger nil
		  company-dabbrev-other-buffers nil
		  company-dabbrev-ignore-case nil
		  company-dabbrev-downcase nil)
	:config
	(setq company-idle-delay 0.3)
	:custom-face
	(company-tooltip ((t (:family "Roboto Mono")))))
#+end_src
*** Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
	:init
	(global-corfu-mode)
	:config
	(setq corfu-auto t
		  corfu-echo-documentation t
		  corfu-scroll-margin 0
		  corfu-count 8
		  corfu-max-width 50
		  corfu-min-width corfu-max-width
		  corfu-auto-prefix 2)
	(evil-make-overriding-map corfu-map)
	(advice-add 'corfu--setup :after 'evil-normalize-keymaps)
	(advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
	(corfu-history-mode 1)
	(savehist-mode 1)
	(add-to-list 'savehist-additional-variables 'corfu-history)
	(defun corfu-enable-always-in-minibuffer ()
	  (setq-local corfu-auto nil)
	  (corfu-mode 1))
	(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
	:general
	(:keymaps 'corfu-map
			  :states 'insert
			  "C-n" 'corfu-next
			  "C-p" 'corfu-previous
			  "C-j" 'corfu-next
			  "C-k" 'corfu-previous
			  "RET" 'corfu-complete
			  "<escape>" 'corfu-quit
			  ))

  (use-package cape
	:init
	(add-to-list 'completion-at-point-functions #'cape-file)
	(add-to-list 'completion-at-point-functions #'cape-keyword)
	)

  (use-package kind-icon
	:config
	(setq kind-icon-default-face 'corfu-default
		  kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.9 :scale 1)
		  kind-icon-blend-frac 0.08)
	(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
	(add-hook 'counsel-load-theme #'(lambda () (interactive) (kind-icon-reset-cache)))
	(add-hook 'load-theme #'(lambda () (interactive) (kind-icon-reset-cache)))
	)
#+END_SRC
** Counsel
[[https://github.com/abo-abo/swiper]]

#+begin_src emacs-lisp 

  (use-package counsel
	:config
	(setq default-directory fet/home
		  counsel-switch-buffer-preview-virtual-buffers nil)
	(setq counsel-find-file-ignore-regexp
		  (concat "\\(Icon\\\)"
				  "\\|\\(?:\\`[#.]\\)"))
	(add-to-list 'ivy-sort-functions-alist '(counsel-recentf . file-newer-than-file-p))
	(add-to-list 'recentf-exclude (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
	(setq find-program "fd")
	(setq counsel-file-jump-args (split-string "-L --type f -H"))
	:general
	(general-define-key :keymaps 'counsel-find-file-map
						"C-c f" 'counsel-file-jump-from-find)
	)
		

#+end_src
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
	:diminish ivy-mode
	:config
	(setq ivy-extra-directories nil       ;; hides . and ..
		  ivy-initial-inputs-alist nil)    ;; removes the ^ in ivy searches
	(setq-default ivy-height 11)
	(setq ivy-fixed-height-minibuffer t)
	(add-to-list 'ivy-height-alist '(counsel-M-x . 10)) ;; show 10 lines for M-x
	(ivy-mode 1)
	(add-to-list 'ivy-format-functions-alist '(counsel-describe-face . counsel--faces-format-function))
	:general
	(general-define-key
	 :keymaps '(ivy-minibuffer-map ivy-switch-buffer-map)
	 "S-SPC" 'nil
	 "C-SPC" 'ivy-restrict-to-matches
	 "C-k" 'ivy-previous-line
	 "C-j" 'ivy-next-line)
	)

  (use-package all-the-icons-ivy-rich
	:init (all-the-icons-ivy-rich-mode 1)
	:config
	(setq all-the-icons-ivy-rich-icon-size 1.0))

  (use-package ivy-rich
	:after ivy
	:init
	(setq ivy-rich-path-style 'abbrev)
	(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
	:config
	(ivy-rich-mode 1))
#+END_SRC
** Vertico
[[https://github.com/minad/vertico]]
[[https://github.com/minad/marginalia]]

#+begin_src emacs-lisp  

  ;; (use-package vertico
  ;;   :init
  ;;   (vertico-mode)
  ;;   (setq vertico-count 20)
  ;;   (setq vertico-resize t)
  ;;   (setq vertico-cycle t)
  ;;   (keymap-set vertico-map "?" #'minibuffer-completion-help)
  ;;   (keymap-set vertico-map "M-RET" #'minibuffer-force-complete-and-exit)
  ;;   (keymap-set vertico-map "M-TAB" #'minibuffer-complete)

  ;; )

  ;; (use-package marginalia
  ;;   :bind
  ;;   (:map minibuffer-local-map ("M-A" . marginalia-cycle))
  ;;   :init
  ;;   (marginalia-mode))
 #+end_src
** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
	:config
	(setq-default history-length 1000)
	(setq-default prescient-history-length 1000)
	(prescient-persist-mode +1))

  (use-package ivy-prescient
	:after ivy
	:config
	(dolist (command '(org-ql-view counsel-find-file fontaine-set-preset))
	  (setq ivy-prescient-sort-commands (append ivy-prescient-sort-commands (list command))))
	(ivy-prescient-mode +1))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
	:diminish smartparens-mode
	:defer 1
	:config
	(require 'smartparens-config)
	(setq sp-max-prefix-length 25
		  sp-max-pair-length 4
		  sp-highlight-pair-overlay nil
		  sp-highlight-wrap-overlay nil
		  sp-highlight-wrap-tag-overlay nil)
	(with-eval-after-load 'evil
	  (setq sp-show-pair-from-inside t
			sp-cancel-autoskip-on-backward-movement nil
			sp-pair-overlay-keymap (make-sparse-keymap)))
	(let ((unless-list '(sp-point-before-word-p
						 sp-point-after-word-p
						 sp-point-before-same-p)))
	  (sp-pair "'" nil :unless unless-list)
	  (sp-pair "\"" nil :unless unless-list))
	(sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))
	(sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
				   "[" nil :post-handlers '(:rem ("| " "SPC")))
	(dolist (brace '("(" "{" "["))
	  (sp-pair brace nil
			   :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
			   :unless '(sp-point-before-word-p sp-point-before-same-p)))
	(smartparens-global-mode t))

#+END_SRC
** Rainbow mode
[[https://github.com/emacsmirror/rainbow-mode]]
[[https://github.com/Fanael/rainbow-delimiters]]

#+begin_src emacs-lisp  

  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)

  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))

#+end_src
** Search and replace
#+BEGIN_SRC emacs-lisp
  (use-package evil-anzu :defer t)
#+END_SRC
** Clipboard
[[https://github.com/rolandwalker/simpleclip]]

#+begin_src emacs-lisp 

  (use-package simpleclip
	:config (simpleclip-mode 1))

  (defun fet/paste-in-minibuffer ()
	(local-set-key (kbd "M-v") 'simpleclip-paste))
  (add-hook 'minibuffer-setup-hook 'fet/paste-in-minibuffer) ;; allows pasting in minibuffer with M-v (Jake B)

#+end_src
** Avy
[[https://github.com/abo-abo/avy]]

#+begin_src emacs-lisp 

  (use-package avy
	:defer t
	:config
	(setq avy-case-fold-search nil))

#+end_src
** Undo and redo
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
#+END_SRC
** Neotree
[[https://github.com/jaypei/emacs-neotree]]

#+begin_src emacs-lisp 
  (use-package neotree
	:config
	(setq neo-smart-open t
		  neo-show-hidden-files t
		  neo-window-width 55
		  neo-window-fixed-size nil
		  inhibit-compacting-font-caches t
		  projectile-switch-project-action 'neotree-projectile-action)
	(add-hook 'neo-after-create-hook
			  #'(lambda (_)
				  (with-current-buffer (get-buffer neo-buffer-name)
					(setq truncate-lines t)
					(setq word-wrap nil)
					(make-local-variable 'auto-hscroll-mode)
					(setq auto-hscroll-mode nil)))))

#+end_src

** Sudo Edit
[[https://github.com/nflath/sudo-edit/blob/master/sudo-edit.el]]

#+begin_src emacs-lisp  

  (use-package sudo-edit)

#+end_src
** Super Save
[[https://github.com/bbatsov/super-save]]

#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :diminish super-save-mode
    :defer 2
    :config
    (setq super-save-auto-save-when-idle t
          super-save-idle-duration 5
          super-save-triggers
          '(evil-window-next evil-window-prev balance-windows other-window next-buffer previous-buffer)
          super-save-max-buffer-size 10000000)
    (super-save-mode +1))
#+END_SRC
** Saveplace
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
	:init (setq save-place-limit 100)
	:config (save-place-mode))
#+END_SRC
** Projectile
[[https://docs.projectile.mx/projectile/index.html]]

#+begin_src emacs-lisp 
  (use-package projectile
	:ensure t
	:init
	(projectile-mode +1)
	:bind
	(:map projectile-mode-map
		  ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map)))

#+end_src

** Yasnippet
[[https://github.com/joaotavora/yasnippet]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :defer 5
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
    (yas-global-mode 1))

  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

#+end_src

* Visuals
** All the icons
[[https://github.com/domtronn/all-the-icons.el]]
[[https://github.com/jtbm37/all-the-icons-dired]]

#+begin_src emacs-lisp 
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src
** Fonts
*** Font configuration
#+BEGIN_SRC emacs-lisp
  (setq text-scale-mode-step 1.2)
  (setq fet-default-line-spacing 1)
  (setq-default line-spacing fet-default-line-spacing)
  (setq fet-text-height 150)
  (set-frame-font "RobotoMono Nerd Font:size=14" nil t)

#+END_SRC
*** Mixed pitch
#+BEGIN_SRC emacs-lisp
  (use-package mixed-pitch
	:defer t
	:config
	(setq mixed-pitch-set-height nil)
	(dolist (face '(org-date org-priority org-tag org-special-keyword))
	  (add-to-list 'mixed-pitch-fixed-pitch-faces face)))
#+END_SRC
** Ace window
[[https://github.com/abo-abo/ace-window]]
[[https://github.com/iqbalansari/restart-emacs]]
[[https://github.com/emacsmirror/diminish]]
[[https://github.com/kaz-yos/reveal-in-osx-finder]]

#+begin_src emacs-lisp 
  (use-package ace-window
	:config
	(set-face-attribute
	 'aw-leading-char-face nil
	 :weight 'bold
	 :height 2.0)
	(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
	)
#+END_SRC

** Dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard]]

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-display-icons-p t
          dashboard-icon-type 'all-the-icons
          dashboard-banner-logo-title "Emacs Is More Than A Text Editor!"
          dashboard-startup-banner "~/.config/emacs/images/emacs.png"
          dashboard-center-content nil ;; set to 't' to center dashboard
          dashboard-items '((recents . 5)
                            (agenda . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (registers . 5)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Themes 
Doom themes: [[https://github.com/doomemacs/themes]]

#+begin_src emacs-lisp 
  (use-package doom-themes
	:config
	(setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
	(load-theme 'doom-solarized-light t)
	;;(load-theme 'doom-one t)
	;;(doom-themes-neotree-config)
	(doom-themes-org-config))

  (line-number-mode)
  (column-number-mode)
  (setq display-time-24-hr-format 't)
  (setq display-time-format "%Y-%m-%d week: %U %H:%M CET")
  (display-time-mode 't)
  (size-indication-mode 0)

#+END_SRC
** Modeline
Hide-mode-line: [[https://github.com/hlissner/emacs-hide-mode-line]]

Doom modeline: [[https://github.com/seagle0128/doom-modeline]]

#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line
	:commands (hide-mode-line-mode))

  (line-number-mode)
  (column-number-mode)
  (size-indication-mode t)

  (use-package doom-modeline
	:ensure t
	:init
	(doom-modeline-mode)
	:config
	(setq doom-modeline-buffer-file-name-style 'relative-from-project
		  doom-modeline-enable-word-count t
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t
		  doom-modeline-modal-icon t
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon t
		  doom-modeline-buffer-state-icon t
		  doom-modeline-bar-width 3))

  (setq fet-doom-modeline-text-height 140)
  (setq doom-modeline-height 28)
#+end_src
** Frame
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((left . 170)
							  (width . 170)
							  (top . 64)
							  (height . 100)
							  (fullscreen . fullheight)
							  (internal-border-width . 8)))

   (setq frame-inhibit-implied-resize t) ;; is startup faster with this?

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC
** Line numbers, fringe and hl-line
#+BEGIN_SRC emacs-lisp
  (setq-default fringes-outside-margins nil)
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)

  (set-face-attribute 'fringe nil :background nil)
  (set-face-attribute 'header-line nil :background nil :inherit 'default)

  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Highlight todo
[[https://github.com/tarsius/hl-todo]]

#+begin_src emacs-lisp  

  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          '(("TODO" warning bold)
            ("FIXME" error bold)
            ("HACK" font-lock-constant-face bold)
            ("REVIEW" font-lock-constant-face bold)
            ("NOTE" success bold)
            ("DEPRECATED" font-lock-doc-face bold))))

#+end_src
** Nerd icons
[[https://github.com/rainstormstudio/nerd-icons.el]]

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons)
#+END_SRC
** Orderless
[[https://github.com/oantolin/orderless]]

#+begin_src emacs-lisp 
  (use-package orderless
	:ensure t
	:custom
	(completion-styles '(orderless basic))
	(completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

** Typography
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Hack Nerd Font Mono" :height 140)
  (setq-default fill-column 90)
  (use-package fontawesome)
#+END_SRC
** Transient stuff
#+BEGIN_SRC emacs-lisp
  ;;(require 'transient)

  (transient-define-prefix fet-config-command ()
    "Config options"
    [["Configuration files"
      ("r" "Edit emacs config file" (lambda () (interactive) (
                                                  (lambda () (interactive) (find-file "~/dev/emacs/Readme.org"))
                                                  )))
      ("c" "Copy snippets" (lambda () (interactive) (
                                                     message "hello"
                                                     )))
      ("g" "Git status" (lambda () (interactive) (magit-status)))
      ("q" "Cancel" (lambda () (interactive) (message "Cancel config options")))
      ]

     ["Theme options"
      ("1" "doom-solarized-light" (lambda () (interactive) (
                                                            load-theme 'doom-solarized-light
                                                            )))
      ("2" "doom-solarized-dark" (lambda () (interactive) (
                                                           load-theme 'doom-solarized-dark
                                                           )))
      ]
     ])

  ;;(fet-config-command)
#+END_SRC
* Work in progress
** Embark
[[https://github.com/oantolin/embark]]

#+BEGIN_SRC emacs-lisp
  ;; TODO install and setup
#+END_SRC

* Applications
** ELFEED
[[https://github.com/skeeto/elfeed]]

#+begin_src emacs-lisp  

  (use-package elfeed
    :config
    (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (("https://www.reddit.com/r/linux.rss" reddit linux)
                        ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                        ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                        ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                        ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                        ("https://hackaday.com/blog/feed/" hackaday linux)
                        ("https://opensource.com/feed" opensource linux)
                        ("https://linux.softpedia.com/backend.xml" softpedia linux)
                        ("https://itsfoss.com/feed/" itsfoss linux)
                        ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                        ("https://www.phoronix.com/rss.php" phoronix linux)
                        ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                        ("https://www.computerworld.com/index.rss" computerworld linux)
                        ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                        ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                        ("https://betanews.com/feed" betanews linux)
                        ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                        ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
 

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

#+end_src
** Eshell
[[https://github.com/4DA/eshell-toggle]]
[[https://github.com/akreisher/eshell-syntax-highlighting]]

#+begin_src emacs-lisp  

  (use-package eshell-toggle
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (setq eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src
** GPTel
#+BEGIN_SRC emacs-lisp
 ;; (use-package gptel) ;; TODO create an api-key to get going
#+END_SRC
** Magit
Magit is a complete text-based user interface to Git.
[[https://magit.vc]]

A very good writeup to get you started using Magit: [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git]]

#+begin_src emacs-lisp 
  (use-package transient)
  (use-package magit)

  (use-package git-gutter
    :ensure t
    :init (global-git-gutter-mode +1))

  (use-package git-timemachine
    :after git-timemachine
    :hook (evil-normalize-keymaps . git-timemachine-hook)
    :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
    )


#+end_src

** Thesaurus
[[https://github.com/agzam/mw-thesaurus.el]]

#+BEGIN_SRC emacs-lisp
  (use-package mw-thesaurus
    :defer t
    :config
    (add-hook 'mw-thesaurus-mode-hook
              (lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit))))
#+END_SRC
* Misc packages
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs :defer t)
  (use-package diminish)
  (use-package reveal-in-osx-finder :commands (reveal-in-osx-finder))

  #+end_src

** TLDR
[[https://github.com/kuanyui/tldr.el]]

#+begin_src emacs-lisp  

  (use-package tldr)

#+end_src
** Try
Try is a package that allows you to try out Emacs packages without installing them. If you pass a URL to a plaint text .el -file it evaluates the content, without storing the file.

Packages from ELPA will be stored in a temporary directory by default.

[[https://github.com/larstvei/Try]]

#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC
* Org Mode
TODO: fix this section

[[https://orgmode.org]]
[[https://github.com/oantolin/orderless]]
[[https://github.com/alphapapa/org-make-toc]]
[[https://github.com/minad/org-modern]]
[[https://github.com/hexmode/ox-reveal]]

#+begin_src emacs-lisp
  (defvar my-agenda-files '("inbox.org" "projects.org" "habits.org" "agenda.org" "read.org"))
  (setq org-directory "~/Org"
		org-agenda-files (mapcar
						  (lambda (f) (concat (file-name-as-directory org-directory) f))
						  my-agenda-files)
		org-default-notes-file (concat (file-name-as-directory org-directory) "notes.org"))



  (use-package org-cliplink
	:defer t
	:after org)



  (require 'org-tempo)

  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)))

  ;(require 'org-make-toc)
  (use-package org-make-toc)

  (use-package ox-reveal
	:defer 5)

  ;; HTML-specific
  (setq org-html-validation-link nil) ;; No validation button on HTML exports

  ;; LaTeX Specific
  (eval-after-load 'ox
	'(add-to-list
	  'org-export-filter-timestamp-functions
	  'org-export-filter-timestamp-remove-brackets)
	)

  (use-package org-modern
	:hook (org-mode . org-modern-mode)
	:config
	(setq
	 ;; org-modern-star '("●" "○" "✸" "✿")
	 org-modern-star '( "⌾" "✸" "◈" "◇")
	 org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
	 org-modern-tag nil
	 org-modern-priority nil
	 org-modern-todo nil
	 org-modern-table nil))

  (setq org-return-follows-link t)
  
  ;; (use-package org-super-agenda
  ;;   :after org
  ;;   :config
  ;;   (setq org-super-agenda-header-map nil)
  ;;   (add-hook 'org-agenda-mode-hook #'(lambda () (setq-local nobreak-char-display-nil)))
  ;;   (org-super-agenda-mode))

#+end_src

#+* Org Mode Config
** LaTeX
#+begin_src emacs-lisp  
  (use-package latex
	:ensure nil
	:defer t
	:init
	(setq TeX-engine 'xetex
		  latex-run-command "/Library/TeX/texbin/xetex")
	(setq TeX-parse-self t
		  TeX-auto-save t
		  TeX-auto-local (concat user-emacs-directory "auctex/auto/")
		  TeX-style-local (concat user-emacs-directory "auctex/style/")
		  TeX-source-correlate-mode t
		  TeX-source-correlate-method 'synctex
		  TeX-show-compilation nil
		  TeX-source-correlate-start-server nil
		  TeX-electirc-sub-and-superscript t
		  TeX-save-query nil)
	(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		  TeX-source--correlate-start-server t)
	:general
	(general-define-key
	 :prefix ","
	 :states 'normal
	 :keymaps 'LaTeX-mode-map
	 "" nil
	 "a" '(TeX-command-run-all :wk "TeX run all")
	 "c" '(TeX-command-master :wk "TeX-command-master")
	 "e" '(LaTeX-environment :wk "Insert environment")
	 "s" '(LaTeX-section :wk "Insert section")
	 "m" '(TeX-insert-macro :wk "Insert macro")
	 )
	)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)


  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
	(setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
			   '("article"
				 "\\documentclass{article}"
				 ("\\section{%s}" . "\\section*{%s}")
				 ("\\subsection{%s}" . "\\subsection*{%s}")
				 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				 ("\\paragraph{%s}" . "\\paragraph*{%s}")
				 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
				 )
			   )
  (add-to-list 'org-latex-classes
			   '("book"
				 "\\documentclass{book}"
				 ("\\part{%s}" . "\\part*{%s}")
				 ("\\chapter{%s}" . "\\chapter*{%s}")
				 ("\\section{%s}" . "\\section*{%s}")
				 ("\\subsection{%s}" . "\\subsection*{%s}")
				 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
			   )
  (add-to-list 'org-latex-classes
			'("koma-article"
			   "\\documentclass{scrartcl}"
			   ("\\section{%s}" . "\\section*{%s}")
			   ("\\subsection{%s}" . "\\subsection*{%s}")
			   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			   ("\\paragraph{%s}" . "\\paragraph*{%s}")
			   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-listings t)
  (setq org-latex-compiler "/Library/TeX/texbin/xelatex")

  (setq org-latex-default-packages-alist
		'(("AUTO" "inputenc" t ("pdflatex"))
		  ("T1" "fontenc" t ("pdflatex"))
		  ("" "graphics" t)
		  ("" "grffile" t)
		  ("" "longtable" nil)
		  ("" "wrapfig" nil)
		  ("" "rotating" nil)
		  ("normalem" "ulem" t)
		  ("" "amsmath" t)
		  ("" "textcomp" t)
		  ("" "amssymb" t)
		  ("" "capt-of" nil)
		  ("dvipsnames" "xcolor" nil)
		  ("dolorlinks=true, linkcolor=Blue, citecolor=BrickRed, urlcolor=PineGreen" "hyperref" nil)
		  ("" "indentfirst" nil)))

  (setq org-latex-listings 'minited
		org-latex-packages-alist '(("" "minted"))
		org-latex-minted-options '(("breaklines" "true")
								   ("breakanywhere" "true")
								   ("mathescape")
								   ("frame" "lines")
								   ("byccolor" "yellow!5")))

  (setq org-latex-pdf-process '("xelatex -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f"))
#+end_src

#+RESULTS:
| xelatex -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o -f %f |

** PDF
[[https://github.com/politza/pdf-tools]]

#+begin_src emacs-lisp  

    (use-package pdf-tools
  :defer t
  ;;:pin manual
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-loader-install)
  (setq-default pdf-view-display-size 'fit-height)
  (setq pdf-view-contiuous nil)
  (setq pdf-view-midnight-colors '("#ffffff" . "#121212" ))
  :general
  (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
                      "j" 'pdf-view-next-page
                      "k" 'pdf-view-previous-page
                      "C-j" 'pdf-view-next-line-or-next-page
                      "C-k" 'pdf-view-previous-line-or-previous-page
                      (kbd "<down>") 'pdf-view-next-line-or-next-page
                      (kbd "<up>") 'pdf-view-previous-line-or-previous-page
                      (kbd "<left>") 'image-backward-hscroll
                      (kbd "<right>") 'image-forward-hscroll
                      "H" 'pdf-view-fit-height-to-window
                      "0" 'pdf-view-fit-height-to-window
                      "W" 'pdf-view-fit-width-to-window
                      "+" 'pdf-view-enlarge
                      "-" 'pdf-view-shrink
                      "q" 'quit-window
                      "Q" 'kill-this-buffer
                      "g" 'revert-buffer
                      "C-s" 'isearch-forward
                      )
)

#+end_src
* Footer in init.el
#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC
