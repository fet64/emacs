#+TITLE: Fet64's Emacs Configuration File
:PROPERTIES:
#+AUTHOR: Fet64
#+email: fet64@outlook.com
#+language: en
#+options: ':t toc:nil author:t email:t num:nil 
#+STARTUP: overview
#+PROPERTY: header-args+ :tangle "~/.config/emacs/init.el"
#+PROPERTY: header-args+ :mkdirp yes
#+SETUPFILE: "~/.config/emacs/setupfiles_html/readtheorg.setup"
:END:

This is a work in progress... it will never be done!

* To use this config
:PROPERTIES:
:CUSTOM_ID: Tousethisconfig-4o1aeqe0d2k0
:END:
** Edit variables
:PROPERTIES:
:CUSTOM_ID: TousethisconfigEditvariables-p85aeqe0d2k0
:END:
In many places in this config I reference =~/.config/emacs/...=. This is the path where I save my Emacs config. If you want to save it at another place you have to edit this. Check the =Custom Variables= section below for more variables.
** Enable shell tools in org-babael
:PROPERTIES:
:CUSTOM_ID: TousethisconfigEnableshelltoolsinorgbabael-n27aeqe0d2k0
:END:
To be able to copy files below you need to activate shell tools for org-babel. you can do that by running =(C-c C-c)= in this code block:
#+begin_src emacs-lisp :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))
(message "Very good, you have enabled sehll use in org-babel")
#+end_src

#+RESULTS:
: Very good, you have enabled sehll use in org-babel

** Copy supporing ifles
:PROPERTIES:
:CUSTOM_ID: TousethisconfigCopysupporingifles-x0aaeqe0d2k0
:END:
You need to copy all supporting code from this git to where you have your emacs config, usually =~/.config/emacs/=.

You can do that by running =(C-c C-c)= in this code block:
#+begin_src sh :tangle no
  
cp -rvp snippets ~/.config/emacs/
cp -rvp scripts ~/.config/emacs/
cp -rvp emacs-custom.el ~/.config/emacs/
cp -rvp images ~/.config/emacs/
cp -rvp setupfiles_html ~/.config/emacs/
cp -rvp setupfiles_latex ~/.config/emacs/
cp -v leuven_theme.css ~/.config/emacs/

#+end_src

#+RESULTS:
| snippets                              | -> | /Users/au/.config/emacs/snippets                              |
| snippets/org-mode                     | -> | /Users/au/.config/emacs/snippets/org-mode                     |
| snippets/org-mode/org_src_block       | -> | /Users/au/.config/emacs/snippets/org-mode/org_src_block       |
| snippets/org-mode/org_elisp_src_block | -> | /Users/au/.config/emacs/snippets/org-mode/org_elisp_src_block |
| scripts                               | -> | /Users/au/.config/emacs/scripts                               |
| scripts/buffer-move.el                | -> | /Users/au/.config/emacs/scripts/buffer-move.el                |
| emacs-custom.el                       | -> | /Users/au/.config/emacs/emacs-custom.el                       |
| images                                | -> | /Users/au/.config/emacs/images                                |
| images/melpa.png                      | -> | /Users/au/.config/emacs/images/melpa.png                      |
| images/emacs.png                      | -> | /Users/au/.config/emacs/images/emacs.png                      |
| images/which-key.png                  | -> | /Users/au/.config/emacs/images/which-key.png                  |
| setupfiles_html                       | -> | /Users/au/.config/emacs/setupfiles_html                       |
| setupfiles_html/readtheorg.setup      | -> | /Users/au/.config/emacs/setupfiles_html/readtheorg.setup      |
| setupfiles_html/org.min_css.setup     | -> | /Users/au/.config/emacs/setupfiles_html/org.min_css.setup     |
| setupfiles_html/bigblow.setup         | -> | /Users/au/.config/emacs/setupfiles_html/bigblow.setup         |
| setupfiles_html/latex_css.setup       | -> | /Users/au/.config/emacs/setupfiles_html/latex_css.setup       |
| setupfiles_latex                      | -> | /Users/au/.config/emacs/setupfiles_latex                      |
| setupfiles_latex/fet-beamer.setup     | -> | /Users/au/.config/emacs/setupfiles_latex/fet-beamer.setup     |
| leuven_theme.css                      | -> | /Users/au/.config/emacs/leuven_theme.css                      |

** Tange this org-file into early-init.el and init.el
:PROPERTIES:
:CUSTOM_ID: TousethisconfigTangethisorgfileintoearlyinitelandinitel-yscaeqe0d2k0
:END:
To create =early-init.el= and =init.el= you need to tangle this org-file. You can do that by running =(C-c C-c)= in this code block:
#+begin_src emacs-lisp :tangle no
  (org-babel-tangle)

#+end_src

#+RESULTS:
| ~/.config/emacs/early-init.el | ~/.config/emacs/init.el |

** Restart Emacs to load the new configuration
:PROPERTIES:
:CUSTOM_ID: TousethisconfigRestartEmacstoloadthenewconfiguration-vzeaeqe0d2k0
:END:
You can now restart Emacs. It will take some time to download all the packages and compile them. You may also need to accept that the theme can run elisp code. When done, restart again and your up and running this config. You can do that by running =(C-c C-c)= in this code block:
#+begin_src emacs-lisp :tangle no
  (restart-emacs)

#+end_src
If you run into any errors, try starting from terminal:

#+begin_src sh :tangle no
emacs --debug-init
#+end_src
* Header
:PROPERTIES:
:CUSTOM_ID: Header-98haeqe0d2k0
:END:
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t; -*-
  ;;;
  ;;; init.el --- part of Fet64's Emacs Configuration
  ;;; Commentary: auto generated (tangled) from Readme.org available at https://github.com/fet64/emacs
  ;;;

  (setq load-path (cons "~/.config/emacs/lisp/" load-path))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle "~/.config/emacs/early-init.el"
  ;; -*- lexical-binding: t; -*-
  ;;;
  ;;; early-init.el --- part of Fet64's Emacs Configuration
  ;;; Commentary: auto generated (tangled) from Readme.org available at https://github.com/fet64/emacs
  ;;; 
#+END_SRC

* Package Manager
:PROPERTIES:
:CUSTOM_ID: PackageManager-djjaeqe0d2k0
:END:
[[./images/melpa.png]]
#+BEGIN_SRC emacs-lisp :tangle "~/.config/emacs/lisp/package-manager.el"
  (setq warning-suppress-log-types '((package reinitialization)))
  (package-initialize)
  (unless (assoc-default "melpa" package-archives)
	(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

  (unless (assoc-default "nongnu" package-archives)
	(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))

  (unless (package-installed-p 'use-package)
	(package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  (use-package quelpa)
  (use-package quelpa-use-package)
  (quelpa-use-package-activate-advice)
  (use-package auto-compile
	:config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)

  (use-package async
	:config
	(setq async-bytecomp-package-mode 1))

  (provide 'package-manager)
#+END_SRC

#+RESULTS:
: package-manager

#+BEGIN_SRC emacs-lisp
  (require 'package-manager)
#+END_SRC
#+RESULTS:
: t

* Early-init.el
:PROPERTIES:
:CUSTOM_ID: Earlyinitel-b7maeqe0d2k0
:END:
GCMH - the Garbage Collector Magic Hack

- [[https://github.com/emacsmirror/gcmh]]

Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity. During normal use a high GC threshold is set. When idling GC is triggered and a low threshold is set. For more detailed explanation, read [[http://akrl.sdf.org/]].
#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  (setq package-enable-at-startup nil)

  ;; Garbage collections
  (setq gc-cons-percentage 0.6)

  ;; Compile warnings
  (setq warning-minimum-level :emergency)
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Misc optimizations
  (setq idle-update-delay 1.0)
  (setq-default bidi-display-reordering 'left-to-right
				  bidi-paragraph-direction 'left-to-right)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  ;; This makes the Aqua titlebar color the same as Emacs
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;; Remove icon in Aqua titlebar
  (setq ns-use-proxy-icon nil)
  ;; Remove fram title from Aqua titlebar
  (setq frame-title-format nil)

  (exec-path)
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)             ;; I like having access to the menu-bar

#+end_src

#+RESULTS:
: t

* Custom Variables
:PROPERTIES:
:CUSTOM_ID: CustomVariables-5xig0se0d2k0
:END:
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Fet64"                                     ;; My full name
		  user-mail-address "fet64@outlook.com")                     ;; My email-address

  (setq org-directory "~/Org")
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-capture-templates
		'(("t" "Todo" entry (file+headline "~/Org/gtd.org" "Tasks")
		   "* TODO %?\n  %i\n  %a")
		  ("j" "Journal" entry (file+datetree "~/Org/journal.org")
		   "* %?\nEntered on %U\n  %i\n  %a")))
  (setq org-log-done 'time)

#+END_SRC

#+RESULTS:
: time

* Keyboard Settings
:PROPERTIES:
:CUSTOM_ID: KeyboardSettings-2opaeqe0d2k0
:END:
#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta
		  mac-command-modifier 'super
		  mac-right-option-modifier 'none
		  )

  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
  (global-set-key (kbd "s-z") 'undo)
  (global-set-key (kbd "s-f") 'isearch-forward)
  (global-set-key (kbd "s-g") 'isearch-repeat-forward)
  (global-set-key (kbd "s-o") 'mac-open-file)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-S") 'mac-save-file-as)
  ;;(global-set-key (kbd "s-p") 'mac-preview)
  (global-set-key (kbd "s-w") 'kill-buffer)
  (global-set-key (kbd "s-m") 'iconify-frame)
  (global-set-key (kbd "s-q") 'save-buffers-kill-emacs)
  (global-set-key (kbd "s-.") 'keyboard-quit)
  (global-set-key (kbd "s-l") 'goto-line)
  (global-set-key (kbd "s-k") 'kill-buffer)
  (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
  (global-set-key (kbd "s-<down>") 'end-of-buffer)
  (global-set-key (kbd "s-<left>") 'beginning-of-line)
  (global-set-key (kbd "s-<right>") 'end-of-line)
  (global-set-key [(meta down)] 'forward-paragraph)
  (global-set-key [(meta up)] 'backward-paragraph)

  ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key [escape] 'keyboard-escape-quit)
#+END_SRC

#+RESULTS:
: keyboard-escape-quit

* Registers
:PROPERTIES:
:CUSTOM_ID: Registers-hptaeqe0d2k0
:END:
Emacs registers are compartments where you can save text, rectangles, positions, and other things for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.

Each register has a name that consists of a single character, which we will denote by r; r can be a letter (such as ‘a’) or a number (such as ‘1’); case matters, so register ‘a’ is not the same as register ‘A’. You can also set a register in non-alphanumeric characters, for instance ‘*’ or ‘C-d’. Note, it’s not possible to set a register in ‘C-g’ or ‘ESC’, because these keys are reserved for quitting).

A register can store a position, a piece of text, a rectangle, a number, a window or frame configuration, a buffer name, or a file name, but only one thing at any given time. Whatever you store in a register remains there until you store something else in that register. To see what register r contains, use M-x view-register:
~M-x view-register RET C~
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html]]

#+begin_src emacs-lisp 
  (setq register-preview-delay 0)
  (set-register ?C (cons 'file "~/dev/emacs/Readme.org"))
  (set-register ?G (cons 'file "~/dev/emacs/.gitignore"))
  
#+end_src

#+RESULTS:
: (file . ~/dev/emacs/.gitignore)

* Scrips
:PROPERTIES:
:CUSTOM_ID: Scrips-53yaeqe0d2k0
:END:
#+begin_src emacs-lisp :tangle "~/.config/emacs/lisp/scripts.el"

  (defun fet/duplicate-line ()
     "Duplicate current line"
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (open-line 1)
     (next-line 1)
     (yank))

  (global-set-key (kbd "C-S-d") 'fet/duplicate-line)

  (defun fet/load-theme (theme)
     "Enhance 'load-theme' by first disabling enabled themes (by jake-emacs)"
     (mapc #'disable-theme custom-enabled-themes)
     (load-theme theme t))

  (defun mac-open-file ()
     (interactive)
     (let ((file (do-applescript "POSIX path of (choose file)")))
       (if (< (length file) 3)
       (setq file
         (substring file 1 (- (length file) 1))))
       (if (and (not (equal file "")) (file-readable-p file))
       (find-file file))))

  (defun mac-save-file-as ()
     (interactive)
     (let ((file (do-applescript "POSIX path of (choose file name with prompt \"Save As...\")")))
       (if (> (length file) 3)
       (setq file
         (substring file 1 (- (length file) 1))))
       (if (not (equal file ""))
       (write-file file))))

  (defun fet/system-clipboard-to-emacs-clipboard ()
     "Set Emacs kill ring to contents of system clipboard."
     (interactive)
     (kill-new (simpleclip-get-contents)))

  (defun fet/prettify-symbols-setup ()
  ;; checkboxes
  (push '("[ ]" .  "☐") prettify-symbols-alist)
  (push '("[X]" . "☑" ) prettify-symbols-alist)
  ;; (push '("[X]" . "☒" ) prettify-symbols-alist)
  (push '("[-]" . "❍" ) prettify-symbols-alist)

  ;; org-babel
  (push '("#+BEGIN_SRC" . ?≫) prettify-symbols-alist)
  (push '("#+END_SRC" . ?≫) prettify-symbols-alist)
  (push '("#+begin_src" . ?≫) prettify-symbols-alist)
  (push '("#+end_src" . ?≫) prettify-symbols-alist)

  (push '("#+BEGIN_QUOTE" . ?❝) prettify-symbols-alist)
  (push '("#+END_QUOTE" . ?❞) prettify-symbols-alist)

  ;; (push '("#+BEGIN_SRC python" . ) prettify-symbols-alist) ;; This is the Python symbol. Comes up weird for some reason
  (push '("#+RESULTS:" . ?≚ ) prettify-symbols-alist)

  ;; drawers
  (push '(":PROPERTIES:" . ?) prettify-symbols-alist)

  ;; tags
  ;; (push '(":Misc:" . "" ) prettify-symbols-alist)

  (prettify-symbols-mode))
  (defun fet/org-done-keep-todo ()
     "Mark an org todo item as done while keeping its former keyword intact, and archive.
  For example: * TODO This item   becomes   * DONE TODO This item."
     (interactive)
     (let ((state (org-get-todo-state)) (tag (org-get-tags)) (todo (org-entry-get (point) "TODO"))
       post-command-hook)
       (if (not (eq state nil))
       (progn (org-back-to-heading)
          (ort-todo "DONE")
          (org-set-tags tag)
          (beginning-of-line)
          (forward-word)
          (insert (concat " " todo)))
     (user-error "Not a TODO."))
       (run-hooks 'post-command-hook)))

  (defun fet/save-and-close-this-buffer (buffer)
  "Saves and closes given buffer."
  (if (get-buffer buffer)
       (let ((b (get-buffer buffer)))
         (save-buffer b)
         (kill-buffer b))))

  (defmacro spacemacs|org-emphasize (fname char)
  "Make function for setting the emphasis in org mode"
  `(defun ,fname () (interactive)
           (org-emphasize ,char)))

  ;; bash
  (defun bash (&optional path)
     "Open a bash window.
  PATH is optional, and defaults to the current directory."
     (interactive (list (if (buffer-file-name)
                (file-name-directory (buffer-file-name))
                  (expand-file-name default-directory))))
     (cond
      ((string= system-type "gnu/linux")
       (shell-command "gnome-terminal"))
      ((string= system-type "darwin")
       (shell-command
        (format "open -b com.apple.terminal%s"
            (if path (format " \"%s\"" (expand-file-name path)) ""))))
      ((string= system-type "windows-nt")
       (shell-command "start \"\" \"%SYSTEMDRIVE%\\Program Files\\Git\\bin\\bash.exe\" --login &"))))

  ;; google
  (defun google ()
     "Open default browser to google.com."
     (interactive)
     (browse-url "http://google.com"))

  (defun ap/switch-theme (theme)
    "Disable active thems and load THEME."
    (interactive (->> (custom-available-themes)
                      (-map #'symbol-name)
                      (completing-read "Theme: ")
                      intern list))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme 'no-confirm))

  (provide 'scripts)
#+end_src

#+BEGIN_SRC emacs-lisp
  (require 'scripts)
#+END_SRC
#+RESULTS:
: scripts

* General configuration settings
:PROPERTIES:
:CUSTOM_ID: Generalconfigurationsettings-u43beqe0d2k0
:END:
** Settings
:PROPERTIES:
:CUSTOM_ID: GeneralconfigurationsettingsSettings-ol8beqe0d2k0
:END:
#+begin_src emacs-lisp
	;; MISC
  (delete-selection-mode 1)                    ;; You can select text and delete it by typing
  (electric-indent-mode 1)                     ;; Turn off the weird indenting that Emacs does by default
  (electric-pair-mode -1)                      ;; turns on the automatic parens pairing, I don't like it
  (global-auto-revert-mode t)                  ;; Automatically show changes if the file has changed
  (global-display-line-numbers-mode 1)          
  (setq-default display-line-numbers-width 5)
  (global-visual-line-mode t)   ;; Enable truncated lines
  (setq org-edit-src-content-indentation 2)    ;; Set src block automatic indent to 2 (which is the default)

  ;; INTERACTION
  (setq use-short-answers t)    ;; y or n suffice when emacs asks for yes or no
  (setq confirm-kill-emacs 'yes-or-no-p)       ;; confirm to quit
  (setq initial-major-mode 'org-mode
	 initial-scratch-message ""
	 initial-buffer-choice t)

  ;; Window
  (setq frame-resize-pixelwise t)
  (setq ns-pop-up-frames nil)
  (setq window-resize-pixelwise nil)
  ;;(setq split-width-threshold 80)

  ;; Lines
  (setq-default truncate-lines t)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (setq line-move-visual t)

  ;; Edit settings
  (setq org-auto-align-tags nil
		org-tags-column 0
		org-catch-invisible-edits 'show-and-error
		org-special-ctrl-a/e t
		org-insert-heading-respect-content t)

  ;; BELL/WARNING
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; SCROLLING
  (setq scroll-conservatively 101)
  (setq mouse-wheel-follow-mouse 't
		 mouse-wheel-progressive-speed nil)
  (setq mac-redisplay-dont-reset-vscroll t
		 mac-mouse-wheel-smooth-scroll nil)

  (setq what-cursor-show-names t)              ;; improves C-x =

  ;; DIRED
  (setq dired-kill-when-opening-new-dired-buffer t)

  ;; MacOS stuff
  (when (string= system-type "darwin")
	 (setq dired-use-ls-dired t
		   insert-directory-program "/opt/homebrew/bin/gls"
		   dired-listing-switches "-aBhl --group-directories-first"))

  ;; Switching buffers
  (setq switch-to-buffer-obey-display-actions t)

  (defun display-buffer-same-window (buffer alist)
	 (unless (or (cdr (assq 'inhibit-same-window alist))
				 (window-minibuffer-p)
				 (window-dedicated-p))
	   (window--display-buffer buffer (selected-window) 'reuse alist)))

#+end_src

** Backups, recent files and trash
:PROPERTIES:
:CUSTOM_ID: GeneralconfigurationsettingsBackupsrecentfilesandtrash-mfebeqe0d2k0
:END:
By default, Emacs saves backup files in the current directory. These are files ending in ~ that are cluttering up your directory lists. The following code stashes them all in =~/.config/emacs/backups/=, where I can find them with find-file if I really need to.
#+begin_src emacs-lisp
  ;; Backup
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))

  ;; History
  (setq savehist-file "~/.config/emacs/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
		  '(kill-ring
		    search-ring
		    regexp-search-ring))

  ;; Trash
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

  ;; recent files
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

#+end_src

#+RESULTS:
: recentf-open-files

* Saving customizations
:PROPERTIES:
:CUSTOM_ID: Savingcustomizations-4pibeqe0d2k0
:END:
I don't want saved customizations in my init.el file.
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html]]

#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/emacs-custom.el")
  (load custom-file)
  

#+end_src

#+RESULTS:
: t

* Keyboard Helpers
:PROPERTIES:
:CUSTOM_ID: KeyboardHelpers-unlbeqe0d2k0
:END:
** Which-key
:PROPERTIES:
:CUSTOM_ID: KeyboardHelpersWhichkey-siobeqe0d2k0
:END:
=which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popus:
[[./images/which-key.png]]
- [[https://github.com/justbur/emacs-which-key]]
#+begin_src emacs-lisp
  (use-package which-key
   :diminish which-key-mode
   :init
   (which-key-mode)
   (which-key-setup-minibuffer)
   :config
   (setq which-key-idle-delay 0.3
		 which-key-sort-order 'which-key-prefix-then-key-order
		 which-key-min-display-lines 10
		 which-key-max-display-columns nil
		 which-key-allow-imprecise-window-fit nil
		 which-key-sort-uppercase-first nil
		 which-key-side-window-slot -10
		 which-key-side-window-max-height 0.25
		 ))

#+end_src

#+RESULTS:
: t
** Shift-Space is the master key
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-SPC") 'fet-space-command)
#+END_SRC

** Evil mode
:PROPERTIES:
:CUSTOM_ID: KeyboardHelpersEvilmode-berbeqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package evil
	   :init
	   (setq evil-want-integration t
		     evil-want-keybinding nil
		     evil-want-fine-undo t
		     evil-want-Y-yank-to-eol t)
	   :config
	   (evil-set-initial-state 'dashboard-mode 'motion)
	   (evil-set-initial-state 'debugger-mode 'motion)
	   (evil-set-initial-state 'pdf-view-mode 'motion)
	   (evil-set-initial-state 'term-mode 'emacs)
	   (evil-set-initial-state 'calc-mode 'emacs)
	   ;; keybinding
	   (define-key evil-window-map "\C-q" 'evil-delete-buffer)
	   (define-key evil-window-map "\C-w" 'kill-this-buffer)
	   (define-key evil-motion-state-map "\C-b" 'evil-scroll-up)
	   (define-key evil-motion-state-map [?\s-\\] 'evil-execute-in-emacs-state) ;; super-\ TODO change binding for this
	   (evil-mode 1))

   (use-package evil-surround
	  :after evil
	  :defer 2
	  :config
	  (global-evil-surround-mode 1))

   (with-eval-after-load 'evil-maps
	  (evil-define-key 'motion help-mode-map "q" 'kill-this-buffer)
	  (evil-define-key 'motion calendar-mode-map "q" 'kill-this-buffer)
	  (define-key evil-motion-state-map (kbd "SPC") nil)
	  (define-key evil-motion-state-map (kbd "RET") nil)
	  (define-key evil-motion-state-map (kbd "TAB") nil))

   (use-package evil-org
	  :ensure t
	  :after org
	  :hook (org-mode . (lambda () evil-org-mode))
	  :config
	  (require 'evil-org-agenda)
	  (evil-org-agenda-set-keys))

#+end_src

#+RESULTS:
| (lambda nil evil-org-mode) | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** General key bindings
:PROPERTIES:
:CUSTOM_ID: KeyboardHelpersGeneralkeybindings-t0ubeqe0d2k0
:END:
- [[https://github.com/noctuid/general.el]]
  
[[./images/general.png]]
#+begin_src emacs-lisp
	 (use-package general
	   :config
	   (general-evil-setup)

	   (general-create-definer fet/leader-keys
		 :states '(normal insert visual emacs)
		 :keymaps 'override
		 :prefix "SPC"
		 :global-prefix "C-SPC") ;; access leader in insert mode

	   (fet/leader-keys
		"SPC" '(counsel-M-x :wk "M-x")
		"." '(find-file :wk "Find file")
		"u" '(universal-argument :wk "Universal argument")
		"TAB TAB" '(comment-line :wk "Comment lines")
		"i" '(ibuffer :wk "Ibuffer")
		"d" '(dired :wk "Dired")
		"T" '(org-babel-tangle :wk "org-babel-tangle")
		"E" '(org-export-dispatch :wk "Export dispatch")
		"M" '(magit-status :wk "Magit status")
		"S" '(yas-insert-snippet :wk "Insert yasnippet")
		"," '(fet-space-command :wk "Space command")
		"q" '(keyboard-quit :wk "Exit menu")
		"c" '(org-capture :wk "Org capture")

		)

	   (fet/leader-keys
		 "b" '(nil :wk "Bookmarks/Buffers")
		 "b b" '(switch-to-buffer :wk "Switch to buffer") ;; TODO fix error
		 "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
		 "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
		 "b d" '(bookmark-delete :wk "Delete bookmark")
		 "b i" '(ibuffer :wk "Ibuffer")
		 "b k" '(kill-current-buffer :wk "Kill current buffer")
		 "b K" '(kill-some-buffers :wk "Kill multiple buffers")
		 "b l" '(list-bookmarks :wk "List bookmarks")
		 "b m" '(bookmark-set :wk "Set bookmark") ;; TODO fix error
		 "b n" '(next-buffer :wk "Next buffer")
		 "b p" '(previous-buffer :wk "Prev buffer")
		 "b r" '(revert-buffer :wk "Reload buffer")
		 "b R" '(rename-buffer :wk "Rename buffer")
		 "b s" '(basic-save-buffer :wk "Save buffer")
		 "b S" '(save-some-buffers :wk "Save multiple buffers")
		 "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")
		 "b P" '(lpr-buffer :wk "Print buffer")
		 )

	   (fet/leader-keys
		 "d" '(nil :wk "Dired")
		 "d d" '(dired :wk "Open dired")
		 "d j" '(dired-jump :wk "Dired jump to current")
		 "d n" '(neotree-dir :wk "Open directory in neotree")
		 )

	   (fet/leader-keys
		 "e" '(nil :wk "Eshell/Evaluate")
		 "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
		 "e d" '(eval-defun :wk "Evaluate defun containing or after point")
		 "e e" '(eval-expression :wk "Evaluate an elisp expression")
		 "e h" '(counsel-esh-history :wk "Eshell history")
		 "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
		 "e r" '(eval-region :wk "Evaluate elisp in region")
		 "e R" '(eww-reload :wk "Reload current page in EWW")
		 "e s" '(eshell :wk "Eshell") ;; TODO fix emacs mode in eshell not evil
		 "e w" '(eww :wk "EWW emacs web broswer")
		 )

	   (fet/leader-keys
		 "f" '(nil :wk "Files")
		 "f c" '((lambda () (interactive) (find-file "~/dev/emacs/Readme.org")) :wk "Open Readme.org")
		 "f d" '(find-grep-dired :wk "Search for string in files in DIR")
		 "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
		 "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
		 "f l" '(counsel-locate :wk "Locate a file")
		 "f s" '((lambda () (interactive) (find-file "~/dev/emacs/snippets/")) :wk "Dired snippets directory")
		 "f r" '(counsel-recentf :wk "Find recent files")
		 "f u" '(sudo-edit-find-file :wk "Sudo find file")
		 "f U" '(sudo-edit :wk "Sudo edit file")
		 )

	   (fet/leader-keys
		 "g" '(nil :wk "Git")
		 "g d" '(magit-dispatch :wk "Magit dispatch")
		 "g ." '(magit-file-disatch :wk "Magit file dispatch")
		 "g b" '(magit-branch-checkout :wk "Switch branch")
		 "g c" '(nil :wk "Create")
		 "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
		 "g c c" '(magit-commit-create : "Create commit")
		 "g c f" '(magit-commit-fixup :wk "Create fixup commit")
		 "g C" '(magit-clone :wk "Clone repo")
		 "g f" '(nil :wk "Find")
		 "g f c" '(magit-show-commit :wk "Show commit")
		 "g f f" '(magit-find-file :wk "Magit find file")
		 "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
		 "g F" '(magit-fetch :wk "Git fetch")
		 "g g" '(magit-status :wk "Magit status")
		 "g i" '(magit-init :wk "Initialize git repo")
		 "g l" '(magit-log-buffer-file :wk "Magit buffer log")
		 "g r" '(vc-revert :wk "Git revert file")
		 "g s" '(magit-stage-file :wk "Git stage file")
		 "g t" '(git-timemachine :wk "Git time machine")
		 "g u" '(magit-unstage-file :wk "Git unstage file")
		 )

	   (fet/leader-keys
		 "h" '(nil :wk "Help")
		 "h a" '(counsel-apropos :wk "Apropos")
		 "h b" '(counsel-bindings :wk "Desc. bindings")
		 "h c" '(describe-char :wk "Desc. char under cursor")
		 "h d" '(nil :wk "Emaccs documentation")
		 "h d a" '(about-emacs :wk "About Emacs")
		 "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
		 "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
		 "h d m" '(info-emacs-manual :wk "The Emacs manual")
		 "h d n" '(view-emacs-news :wk "View Emacs news")
		 "h d o" '(describe-distribution :wk "How to obtain Emacs")
		 "h d p" '(view-emacs-problems :wk "View Emacs problems")
		 "h d t" '(view-emacs-todo :wk "View Emacs todo")
		 "h d w" '(describe-no-warranty :wk "Describe no warranty")
		 "h e" '(view-echo-area-messages :wk "View echo area messages")
		 "h f" '(describe-function :wk "Desc. function")
		 "h F" '(describe-face :wk "Desc. face")
		 "h g" '(describe-gnu-project :wk "Desc. GNU Project")
		 "h i" '(info :wk "Info")
		 "h I" '(describe-input-method :wk "Desc. input method")
		 "h k" '(describe-key :wk "Desc. key")
		 "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
		 "h L" '(describe-language-environment :wk "Desc. language environment")
		 "h m" '(describe-mode :wk "Desc. mode")
		 "h t" '(fet-hydra-theme-switcher/body :wk "Fixme Change theme")
		 "h v" '(describe-variable :wk "Desc. variable")
		 "h w" '(where-is :wk "Prints keybinding for command if set")
		 "h x" '(describe-command :wk "Display full documentation for command")
		 )

	   (fet/leader-keys
		 "m" '(nil :wk "Org")
		 "m a" '(org-agenda :wk "Org agenda")
		 "m e" '(org-export-dispatch :wk "Org export dispatch")
		 "m i" '(org-toggle-item :wk "Org toggle item")
		 "m t" '(org-todo :wk "Org todo")
		 "m T" '(org-babel-tangle :wk "Org babel tangle")
		 "m l" '(org-todo-list :wk "Org todo list")
		 "m b" '(nil :wk "Tables")
		 "m b -" '(org-table-insert-hline :wk "Insert hline in table")
		 "m d" '(nil :wk "Date/deadline")
		 "m d t" '(org-time-stamp :wk "Org time stamp")
		 )

	   (fet/leader-keys
		 "o" '(nil :wk "Open")
		 "o e" '(elfeed :wk "Elfeed RSS")
		 "o f" '(make-frame :wk "Open buffer in new frame")
		 "o F" '(select-frame-by-name :wk "Select frame by name")
		 )

	   (fet/leader-keys
		 "p" '(projectile-command-map :wk "Projectile")
		 )

	   (fet/leader-keys
		 "s" '(nil :wk "Search")
		 "s d" '(dictionary-search :wk "Search dictionary")
		 "s m" '(man :wk "Man pages")
		 "s o" '(pdf-occur :wk "Pdf search lines matching STRING")
		 "s t" '(tldr :wk "Lookup TLDR docs for a command")
		 )

	   (fet/leader-keys
		 "t" '(nil :wk "Toggle")
		 "t e" '(eshell-toggle :wk "Toggle eshell")
		 "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
		 "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
		 "t o" '(org-mode :wk "Toggle org mode")
		 "t r" '(rainbow-mode :wk "Toggle rainbow mode")
		 "t t" '(visual-line-mode :wk "Toggle truncated lines")
		 )

	   (fet/leader-keys
		 "w" '(nil :wk "Windows/Words")
		 "w c" '(evil-window-delete :wk "Close window")
		 "w n" '(evil-window-new :wk "New window")
		 "w s" '(evil-window-split :wk "Horizontal split window")
		 "w v" '(evil-window-vsplit :wk "Vertical split window")
		 "w h" '(evil-window-left :wk "Window left")
		 "w j" '(evil-window-down :wk "Window down")
		 "w k" '(evil-window-up :wk "Window up")
		 "w l" '(evil-window-right :wk "Window right")
		 "w w" '(evil-window-next :wk "Goto next window")
		 "w d" '(downcase-word :wk "Downcase word")
		 "w u" '(upcase-word :wk "Upcase word")
		 "w =" '(count-words :wk "Count words/lines for buffer")
		 "w t" '(nil :wk "Thesaurus")
		 "w t p" '(mw-thesaurus-lookup-at-point :wk "Lookup word at point")
		 "w t m" '(mw-thesaurus-mode :wk "Merriam-Webster minor mode")
		 "w t l" '(mw-thesaurus-lookup :wk "Lookup word")
		 )
	   (general-def
		 :keymaps 'override
		 ;; Emacs
		 "M-x" 'counsel-M-x
		 "s-x" 'execute-extended-command
		 "s-b" 'counsel-switch-buffer ; super-b
		 ;; Editing
		 "M-v" 'simpleclip-paste
		 "M-V" 'evil-paste-after ; shift-paste uses the internal clipboard
		 "M-c" 'simpleclip-copy
		 ;; Utility
		 "C-c c" 'org-capture
		 "C-c a" 'org-agenda
		 "C-s" 'swiper
		 "M-=" 'count-words
		 "M-j" 'avy-goto-char-2
		 )

	   (setq general-describe-priority-keymaps nil
		 general-describe-keymap-sort-function #'general-sort-by-car
		 general-describe-state-sort-function #'general-sort-by-car)
	   (setq general-describe-keybinding-sort-function #'general-sort-by-car)

	   )


  ;; end of general-define-key

#+end_src

#+RESULTS:
: t

* Interaction and editing files
:PROPERTIES:
:CUSTOM_ID: Interactionandeditingfiles-jnwbeqe0d2k0
:END:
** Corfu
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesCorfu-vwybeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package corfu
	:init
	(global-corfu-mode)
	:config
	(setq corfu-auto t
		  corfu-echo-documentation t
		  corfu-scroll-margin 0
		  corfu-count 8
		  corfu-max-width 50
		  corfu-min-width corfu-max-width
		  corfu-auto-prefix 2)
	(evil-make-overriding-map corfu-map)
	(advice-add 'corfu--setup :after 'evil-normalize-keymaps)
	(advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
	(corfu-history-mode 1)
	(savehist-mode 1)
	(add-to-list 'savehist-additional-variables 'corfu-history)
	(defun corfu-enable-always-in-minibuffer ()
	  (setq-local corfu-auto nil)
	  (corfu-mode 1))
	(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
	:general
	(:keymaps 'corfu-map
			  :states 'insert
			  "C-n" 'corfu-next
			  "C-p" 'corfu-previous
			  "C-j" 'corfu-next
			  "C-k" 'corfu-previous
			  "RET" 'corfu-complete
			  "<escape>" 'corfu-quit
			  ))

#+end_src

#+RESULTS:

** Cape
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesCape-c81ceqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package cape
	:init
	(add-to-list 'completion-at-point-functions #'cape-file)
	(add-to-list 'completion-at-point-functions #'cape-keyword)
	)

#+end_src

#+RESULTS:

** Kind-icon
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesKindicon-go3ceqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package kind-icon
	:config
	(setq kind-icon-default-face 'corfu-default
		  kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.9 :scale 1)
		  kind-icon-blend-frac 0.08)
	(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
	(add-hook 'counsel-load-theme #'(lambda () (interactive) (kind-icon-reset-cache)))
	(add-hook 'load-theme #'(lambda () (interactive) (kind-icon-reset-cache)))
	)

#+end_src

#+RESULTS:
: t

** Counsel
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesCounsel-b76ceqe0d2k0
:END:
#+begin_src emacs-lisp

  (use-package counsel
	 :config
	 (setq default-directory fet/home
		   counsel-switch-buffer-preview-virtual-buffers nil)
	 (setq counsel-find-file-ignore-regexp
		   (concat "\\(Icon\\\)"
				   "\\|\\(?:\\`[#.]\\)"))
	 (add-to-list 'ivy-sort-functions-alist '(counsel-recentf . file-newer-than-file-p))
	 (add-to-list 'recentf-exclude (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
	 (setq find-program "fd")
	 (setq counsel-file-jump-args (split-string "-L --type f -H"))
	 :general
	 (general-define-key :keymaps 'counsel-find-file-map
						 "C-c f" 'counsel-file-jump-from-find)
	 )



#+end_src

#+RESULTS:

** Ivy
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesIvy-wi9ceqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package ivy
	:diminish ivy-mode
	:config
	(setq ivy-extra-directories nil       ;; hides . and ..
		  ivy-initial-inputs-alist nil)    ;; removes the ^ in ivy searches
	(setq-default ivy-height 11)
	(setq ivy-fixed-height-minibuffer t)
	(add-to-list 'ivy-height-alist '(counsel-M-x . 10)) ;; show 10 lines for M-x
	(ivy-mode 1)
	(add-to-list 'ivy-format-functions-alist '(counsel-describe-face . counsel--faces-format-function))
	:general
	(general-define-key
	 :keymaps '(ivy-minibuffer-map ivy-switch-buffer-map)
	 "S-SPC" 'nil
	 "C-SPC" 'ivy-restrict-to-matches
	 "C-k" 'ivy-previous-line
	 "C-j" 'ivy-next-line)
	)

 (use-package all-the-icons-ivy-rich
	:init (all-the-icons-ivy-rich-mode 1)
	:config
	(setq all-the-icons-ivy-rich-icon-size 1.0))

 (use-package ivy-rich
	:after ivy
	:init
	(setq ivy-rich-path-style 'abbrev)
	(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
	:config
	(ivy-rich-mode 1))

#+end_src

#+RESULTS:
: t

** Marginalia
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesMarginalia-uhcceqe0d2k0
:END:
#+begin_src emacs-lisp
    (use-package marginalia
	:bind
	(:map minibuffer-local-map ("M-A" . marginalia-cycle))
	:init
	(marginalia-mode)) 

#+end_src

#+RESULTS:
: marginalia-cycle

** Prescient
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesPrescient-ugfceqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package prescient
	:config
	(setq-default history-length 1000)
	(setq-default prescient-history-length 1000)
	(prescient-persist-mode +1))

 (use-package ivy-prescient
	:after ivy
	:config
	(dolist (command '(org-ql-view counsel-find-file fontaine-set-preset))
	  (setq ivy-prescient-sort-commands (append ivy-prescient-sort-commands (list command))))
	(ivy-prescient-mode +1))

#+end_src

#+RESULTS:
: t

** Smart parens
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesSmartparens-kmiceqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package smartparens
	:diminish smartparens-mode
	:defer 1
	:config
	(require 'smartparens-config)
	(setq sp-max-prefix-length 25
		  sp-max-pair-length 4
		  sp-highlight-pair-overlay nil
		  sp-highlight-wrap-overlay nil
		  sp-highlight-wrap-tag-overlay nil)
	(with-eval-after-load 'evil
	  (setq sp-show-pair-from-inside t
			sp-cancel-autoskip-on-backward-movement nil
			sp-pair-overlay-keymap (make-sparse-keymap)))
	(let ((unless-list '(sp-point-before-word-p
						 sp-point-after-word-p
						 sp-point-before-same-p)))
	  (sp-pair "'" nil :unless unless-list)
	  (sp-pair "\"" nil :unless unless-list))
	(sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))
	(sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
				   "[" nil :post-handlers '(:rem ("| " "SPC")))
	(dolist (brace '("(" "{" "["))
	  (sp-pair brace nil
			   :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
			   :unless '(sp-point-before-word-p sp-point-before-same-p)))
	(smartparens-global-mode t))


#+end_src

#+RESULTS:
: t

** Rainbow mode
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesRainbowmode-5xlceqe0d2k0
:END:
#+begin_src emacs-lisp
  
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)

(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))


#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Search and replace
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesSearchandreplace-rcpceqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package evil-anzu :defer t)

#+end_src

#+RESULTS:

** Clipboard
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesClipboard-jrsceqe0d2k0
:END:
#+begin_src emacs-lisp
  
 (use-package simpleclip
	:config (simpleclip-mode 1))

 (defun fet/paste-in-minibuffer ()
	(local-set-key (kbd "M-v") 'simpleclip-paste))
 (add-hook 'minibuffer-setup-hook 'fet/paste-in-minibuffer) ;; allows pasting in minibuffer with M-v (Jake B)


#+end_src

#+RESULTS:
| fet/paste-in-minibuffer | marginalia--minibuffer-setup | all-the-icons-ivy-rich-minibuffer-align-icons | savehist-minibuffer-hook | rfn-eshadow-setup-minibuffer | minibuffer-error-initialize | minibuffer-history-isearch-setup | minibuffer-history-initialize |

** Avy
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesAvy-y2wceqe0d2k0
:END:
#+begin_src emacs-lisp
  
 (use-package avy
	:defer t
	:config
	(setq avy-case-fold-search nil))


#+end_src

#+RESULTS:

** Undo and redo
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesUndoandredo-k3zceqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package undo-fu)

#+end_src

#+RESULTS:

** Sudo edit
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesSudoedit-f22deqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package sudo-edit)

#+end_src

#+RESULTS:

** Super save
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesSupersave-cs4deqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package super-save
  :diminish super-save-mode
  :defer 2
  :config
  (setq super-save-auto-save-when-idle t
        super-save-idle-duration 5
        super-save-triggers
        '(evil-window-next evil-window-prev balance-windows other-window next-buffer previous-buffer)
        super-save-max-buffer-size 10000000)
  (super-save-mode +1))

#+end_src

#+RESULTS:

** Saveplace
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesSaveplace-7d7deqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package saveplace
	:init (setq save-place-limit 100)
	:config (save-place-mode))

#+end_src

#+RESULTS:
: t

** Yasnippet
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesYasnippet-ir9deqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package yasnippet
  :diminish yas-minor-mode
  :defer 5
  :config
  (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
  (yas-global-mode 1))

(require 'warnings)
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))


#+end_src

#+RESULTS:
| yasnippet | backquote-change |

** Projectile
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesProjectile-l1cdeqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package projectile
	:ensure t
	:init
	(projectile-mode +1)
	:bind
	(:map projectile-mode-map
		  ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map)))


#+end_src

#+RESULTS:
: projectile-command-map

** Orderless
:PROPERTIES:
:CUSTOM_ID: InteractionandeditingfilesOrderless-x6edeqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package orderless
	:ensure t
	:custom
	(completion-styles '(orderless basic))
	(completion-category-overrides '((file (styles basic partial-completion)))))


#+end_src

#+RESULTS:

* Eshell
:PROPERTIES:
:CUSTOM_ID: Eshell-c7gdeqe0d2k0
:END:
#+begin_src emacs-lisp
  
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh"))


#+end_src

#+RESULTS:
| bash | fish | htop | ssh | top | zsh |

* Visuals
:PROPERTIES:
:CUSTOM_ID: Visuals-zbideqe0d2k0
:END:
** All the icons
:PROPERTIES:
:CUSTOM_ID: VisualsAlltheicons-w1kdeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))


#+end_src

#+RESULTS:
| lambda | nil | (all-the-icons-dired-mode t) |

** Fonts
:PROPERTIES:
:CUSTOM_ID: VisualsFonts-8wldeqe0d2k0
:END:
#+begin_src emacs-lisp
  (setq text-scale-mode-step 1)
  (font-family-list)
  (add-to-list 'default-frame-alist
			   (cond
				((string-equal system-type "darwin") '(font . "FireCode-14"))
				((string-equal system-type "gnu/linux") '(font . "FiraCode-12"))))

  (use-package mixed-pitch
	:defer t
	:config
	(setq mixed-pitch-set-height nil)
	(dolist (face '(org-date org-priority org-tag org-special-keyword))
	  (add-to-list 'mixed-pitch-fixed-pitch-faces face)))

  (set-face-attribute 'default nil :family "Hack Nerd Font Mono" :height 140)
  (setq-default fill-column 90)
  (use-package fontawesome)

  (modify-all-frames-parameters
   '((right-divider-width . 20)
	 (internal-border-width . 20)))
  (dolist (face '(window-divider
				  window-divider-first-pixel
				  window-divider-last-pixel))
	(face-spec-reset-face face)
	(set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (setq-default line-spacing 0.12)

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

#+RESULTS:
: text-scale-decrease

** Dashboard
:PROPERTIES:
:CUSTOM_ID: VisualsDashboard-1xndeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-display-icons-p t
        dashboard-icon-type 'all-the-icons
        dashboard-banner-logo-title "Emacs Is More Than A Text Editor!"
        dashboard-startup-banner "~/.config/emacs/images/emacs.png"
        dashboard-center-content nil ;; set to 't' to center dashboard
        dashboard-items '((recents . 15)
                          (agenda . 10)
                          (bookmarks . 10)
                          (projects . 10)
                          (registers . 10)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

#+end_src

#+RESULTS:
: t

** Themes
:PROPERTIES:
:CUSTOM_ID: VisualsThemes-k2qdeqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package doom-themes
	:config
	(setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
	(load-theme 'doom-solarized-light t)
	;;(load-theme 'doom-one t)
	;;(doom-themes-neotree-config)
	(doom-themes-org-config))

 (line-number-mode)
 (column-number-mode)
 (setq display-time-24-hr-format 't)
 (setq display-time-format "%Y-%m-%d week: %U %H:%M CET")
 (display-time-mode 't)
 (size-indication-mode 0)


#+end_src

#+RESULTS:

** Modeline
:PROPERTIES:
:CUSTOM_ID: VisualsModeline-scsdeqe0d2k0
:END:
#+begin_src emacs-lisp
   (use-package hide-mode-line
	:commands (hide-mode-line-mode))

 (line-number-mode)
 (column-number-mode)
 (size-indication-mode t)

 (use-package doom-modeline
	:ensure t
	:init
	(doom-modeline-mode)
	:config
	(setq doom-modeline-buffer-file-name-style 'relative-from-project
		  doom-modeline-enable-word-count t
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t
		  doom-modeline-modal-icon t
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon t
		  doom-modeline-buffer-state-icon t
		  doom-modeline-bar-width 3))

 (setq fet-doom-modeline-text-height 140)
 (setq doom-modeline-height 28)

#+end_src

#+RESULTS:
: 28

** Frame
:PROPERTIES:
:CUSTOM_ID: VisualsFrame-ikudeqe0d2k0
:END:
#+begin_src emacs-lisp
  (setq default-frame-alist '((left . 170)
							  (width . 170)
							  (top . 64)
							  (height . 80)
							  ;(fullscreen . fullheight)
							  (internal-border-width . 8)))

 (setq frame-inhibit-implied-resize t) ;; is startup faster with this?

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

#+end_src

#+RESULTS:
: ((ns-transparent-titlebar . t) (left . 170) (width . 170) (top . 64) (height . 100) (fullscreen . fullheight) (internal-border-width . 8))

** Line numbers, fringe and hl-line
:PROPERTIES:
:CUSTOM_ID: VisualsLinenumbersfringeandhlline-flwdeqe0d2k0
:END:
#+begin_src emacs-lisp
  (setq-default fringes-outside-margins nil)
(setq-default indicate-buffer-boundaries nil)
(setq-default indicate-empty-lines nil)

(set-face-attribute 'fringe nil :background nil)
(set-face-attribute 'header-line nil :background nil :inherit 'default)

(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

#+end_src

#+RESULTS:
| display-line-numbers-mode | hl-line-mode | rainbow-mode |

** Highlight todo
:PROPERTIES:
:CUSTOM_ID: VisualsHighlighttodo-akydeqe0d2k0
:END:
#+begin_src emacs-lisp
  
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(("TODO" warning bold)
          ("FIXME" error bold)
          ("HACK" font-lock-constant-face bold)
          ("REVIEW" font-lock-constant-face bold)
          ("NOTE" success bold)
          ("DEPRECATED" font-lock-doc-face bold))))


#+end_src

#+RESULTS:
| hl-todo-mode | display-line-numbers-mode | hl-line-mode | rainbow-mode |

** Nerd icons
:PROPERTIES:
:CUSTOM_ID: VisualsNerdicons-cc0eeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package nerd-icons)

#+end_src

#+RESULTS:

* Transient
:PROPERTIES:
:CUSTOM_ID: Transient-h12eeqe0d2k0
:END:
Using transient menus for my main work. I like them a little bit more than =general.el=. I still use =general.el= from time to time.
- [[./images/transient-base.png]]
- [[./images/transient-help.png]]
  
#+begin_src emacs-lisp
  (require 'transient)

  (defcustom tdp-exit-at-once-p nil
    "Exit tdp at onece option"
    :type 'boolean
    :group 'my-options)

  (defun tdp-toggle-exit-at-once-p ()
    "Toggle the value of the boolean option."
    (interactive)
    (setq tdp-exit-at-once-p (not tdp-exit-at-once-p)))

  (transient-define-prefix tdp-line-numbers ()
    "Line-numbers"
    :transient-suffix 'transient--do-stay
    ["Line number style"
      ("l" "Toggle line-numbers" display-line-numbers-mode)
      ("r" "Relative line-numbers" menu-bar--display-line-numbers-mode-relative)
      ("a" "Absolute line-numbers" menu-bar--display-line-numbers-mode-absolute)
     ]
    ["Navigation"
      ("b" "Back" transient-quit-one)
      ("q" "Quit" transient-quit-all)
      ]
    )

  (transient-define-prefix tdp-buffers ()
    "Buffers"
    :transient-suffix 'transient--do-stay
    [["Buffers"
     ("b" "Switch to buffer" switch-to-buffer)
     ("c" "Create indirect buffer copy in a split" clone-indirect-buffer)
     ("C" "Clone indirect buffer in new window" clone-indirect-buffer-other-window)
     ("i" "Ibuffer" ibuffer)
     ]
    ["Kill"
     ("k" "Kill current buffer" kill-current-buffer)
     ("K" "Kill some buffers" kill-some-buffers)
     ]
    ["Movement"
     ("n" "Next buffer" next-buffer)
     ("p" "Previous buffer" previous-buffer)
     ]
    ["Commands"
     ("r" "Revert buffer" revert-buffer)
     ("R" "Rename buffer" rename-buffer)
     ("s" "Save buffer" basic-save-buffer)
     ("S" "Save multiple buffers" save-some-buffers)
     ("P" "Print buffer" lpr-buffer)
     ]]
    ["Navigation"
      ("b" "Back" transient-quit-one)
      ("q" "Quit" transient-quit-all)
      ]
    )

  (transient-define-prefix tdp-help ()
    "Help"
    :transient-suffix 'transient--exit
    [["Describe"
      ("c" "Desc. char" describe-char)
      ("f" "Desc. function" describe-function)
      ("F" "Desc. face" describe-face)
      ("i" "Desc. input method" describe-input-method)
      ("l" "Desc. language environment" describe-language-environment)
      ("m" "Desc. mode" describe-mode)
      ("v" "Desc. variable" describe-variable)
      ("x" "Desc. command" describe-command)
      ]
     ["Info"
  ;;	("a" "Apropos" counsel-apropos)
  ;;	("b" "Show bindings" counsel-bindings)
      ("V" "Veiw echo area messages" view-echo-area-messages)
      ("I" "View Info" info)
      ("L" "Display recent keystrokes and the commands run" view-lossage)
      ("w" "Prints keybinding for command if set" where-is)
      ]
     ["Emacs documentation"
      ("ea" "About Emacs" about-emacs)
      ("ed" "View Emacs debugging" view-emacs-debugging)
      ("ef" "View Emacs FAQ" view-emacs-FAQ)
      ("em" "View Emacs Manual" info-emacs-manual)
      ("en" "View Emacs News" view-emacs-news)
      ("eo" "How to obtain Emacs" describe-distribution)
      ("ep" "View Emacs problems" view-emacs-problems)
      ("et" "View Emacs todo" view-emacs-todo)
      ("ew" "Describe No Warranty" describe-no-warranty)
      ]
     ]
    ["Navigation"
     ("b" "Back" transient-quit-one)
     ("q" "Quit" transient-quit-all)
     ]
    )

  (transient-define-prefix tdp-magit ()
    "Magit"
    :transient-suffix 'transient--do-stay
    [["Commands"
      ("g" "Magit status" magit-status)
      ("." "Magit file dispatch" magit-file-dispatch)
      ("b" "Switch branch" magit-branch-checkout)
      ("F" "Git fetch" magit-fetch)
      ("i" "Initialize git repo" magit-init)
      ("l" "Magit buffer log" magit-log-buffer-file)
      ("r" "Git revert file" vc-revert)
      ("s" "Git stage file" magit-stage-file)
      ("u" "git unstage file" magit-unstage-file)
      ]
     ["Create"
      ("cb" "Create branch and checkout" magit-branch-checkout)
      ("cc" "Create commit" magit-commit-create)
      ("cf" "Create fixup commit" magit-commit-fixup)
      ]
     ["Find"
      ("fc" "Show commit" magit-show-commit)
      ("ff" "Magit find file" magit-find-file)
      ("fg" "Find gitconfig file" magit-find-git-config-file)
      ]
     ]
       ["Navigation"
      ("b" "Back" transient-quit-one)
      ("q" "Quit" transient-quit-all)
      ]
    )

  (transient-define-prefix tdp-themes ()
    "Themes"
    :transient-suffix 'transient--do-stay
     [["Dark themes"
     ("1" "doom-one" (lambda () (interactive) (fet/load-theme 'doom-one)))
     ("2" "doom-nord" (lambda () (interactive) (fet/load-theme 'doom-nord)))
     ("3" "doom-acario-dark" (lambda () (interactive) (fet/load-theme 'doom-acario-dark)))
     ("4" "doom-ayu-dark" (lambda () (interactive) (fet/load-theme 'doom-ayu-dark)))
     ]
    ["Light themes"
     ("s" "doom-solarized-light" (lambda () (interactive) (fet/load-theme 'doom-solarized-light)))
     ]]
     ["Navigation"
  ;;	("b" "Back" transient-quit-one)
      ("q" "Quit" transient-quit-all)
      ]
    )

  (transient-define-prefix fet-space-command ()
    "Config options"
    [
     ["Commands"
      ("SPC" "M-x" counsel-M-x)
      ("g" "Magit status" magit-status)
      ("G" "Magit" tdp-magit)
      ("S" "Insert snippet" yas-insert-snippet)
      ("T" "Org babel tangle" org-babel-tangle)
      ("E" "Export dispatch" org-export-dispatch)
      ("a" "Org agenda" org-agenda)
      ("l" "TODO list" org-todo-list)
      ("c" "Org capture" org-capture)
      ]

     ["Buffer"
      ("i" "Ibuffer" ibuffer)
       ("bn" "Next buffer" next-buffer)
       ("bp" "Previous buffer" previous-buffer)
       ("bb" "More buffer commands" tdp-buffers)
      ]

     ["Evaluate"
      ("eb" "Evaluate buffer" eval-buffer)
      ("ee" "Evaluate expression" eval-expression)
      ("ed" "Evaluate defun" eval-defun)
      ]

     ["Help"
      ("hf" "Desc. function" describe-function)
      ("hv" "Desc. variable" describe-variable)
      ("hh" "More help commands" tdp-help)
      ]

     ["Settings"
      ("st" "Themes" tdp-themes)
      ("sl" "Line numbers" tdp-line-numbers)
      ]
    ["Windows"
     ("wc" "Close window" evil-window-delete)
     ("wn" "New window" evil-window-new)
     ("ws" "Window split" evil-window-split)
     ("wv" "Window vert split" evil-window-vsplit)
     ]]
    [["Navigation"
    ;; 	("b" "Back" transient-quit-one)
      ("q" "Quit" transient-quit-all)
      ]
     ["Emacs"
      ("ec" "Edit emacs config file" (lambda () (interactive) (find-file "~/dev/emacs/Readme.org")))
      ("dd" "Dired ~/dev/emacs/" (lambda () (interactive) (find-file "~/dev/emacs/")))
      ]
     ]
    )

#+end_src

#+RESULTS:
| [1 transient-columns nil ([1 transient-column (:description Configuration files) ((1 transient-suffix (:key r :description Edit emacs config file :command transient:fet-config-command:Edit emacs config file)) (1 transient-suffix (:key c :description Copy snippets :command transient:fet-config-command:Copy snippets)) (1 transient-suffix (:key g :description Git status :command transient:fet-config-command:Git status)) (1 transient-suffix (:key q :description Cancel :command transient:fet-config-command:Cancel)))] [1 transient-column (:description Theme options) ((1 transient-suffix (:key 1 :description doom-solarized-light :command transient:fet-config-command:doom-solarized-light)) (1 transient-suffix (:key 2 :description doom-solarized-dark :command transient:fet-config-command:doom-solarized-dark)))])] |

* Magit
:PROPERTIES:
:CUSTOM_ID: Magit-nl3eeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package transient)
(use-package magit)

(use-package git-gutter
  :ensure t
  :init (global-git-gutter-mode +1))

(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
  )



#+end_src

#+RESULTS:

* Misc packages
:PROPERTIES:
:CUSTOM_ID: Miscpackages-555eeqe0d2k0
:END:
** Thesaurus
:PROPERTIES:
:CUSTOM_ID: MiscpackagesThesaurus-dd6eeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package mw-thesaurus
  :defer t
  :config
  (add-hook 'mw-thesaurus-mode-hook
            (lambda () (define-key evil-normal-state-local-map (kbd "q") 'mw-thesaurus--quit))))

#+end_src

#+RESULTS:

** TLDR
:PROPERTIES:
:CUSTOM_ID: MiscpackagesTLDR-qr7eeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package tldr)

#+end_src

#+RESULTS:

** Try
:PROPERTIES:
:CUSTOM_ID: MiscpackagesTry-f79eeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package try)

#+end_src

#+RESULTS:

** Misc packages
:PROPERTIES:
:CUSTOM_ID: MiscpackagesMiscpackages-bjaeeqe0d2k0
:END:
#+begin_src emacs-lisp
    (use-package restart-emacs :defer t)
  (use-package diminish)
  (use-package reveal-in-osx-finder :commands (reveal-in-osx-finder))

   (use-package unfill :defer t)
   (use-package f) ;; provides functions for working with files
   (use-package burly :defer t)
   (use-package ace-window :defer t)
   (defvar aw-dispatch-alist
	  '((?x aw-delete-window "Delete Window")
	    (?m aw-swap-window "Swap Windows")
	    (?M aw-move-window "Move Window")
	    (?C aw-copy-window "Copy Window")
	    (?j aw-switch-buffer-in-window "Select Buffer")
	    (?n aw-flip-window)
	    (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	    (?c aw-split-window-fair "Split Fair Window")
	    (?v aw-split-window-vert "Split Vert Window")
	    (?b aw-split-window-horz "Split Horz Window")
	    (?o delete-other-windows "Delete Other Windows")
	    (?? aw-show-dispatch-help))
	  "List of actions for `aw-dispatch-default'.")
   (use-package centered-cursor-mode :diminish centered-cursor-mode)


   (use-package bufler
	  :config
	  (setq bufler-filter-buffer-modes nil
		    bufler-filter-buffer-name-regexps nil)
	  (setq bufler-groups
		    (bufler-defgroups
		     (group
			  (auto-workspace))
		     (group
			  (group-or "*Help/Info*"
					    (mode-match "*Help*" (rx bos "help-"))
					    (mode-match "*Info*" (rx bos "info-"))))
		     (group
			  (group-and "*Special*"
					     (lambda (buffer)
						   (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
											    buffer)
									   (funcall (mode-match "Dired" (rx bos "dired"))
											    buffer)
									   (funcall (auto-file) buffer))
						     "*Special*"))))
		     (group
			  (name-match "**Special**" (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
		     (group
			  (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
			  (auto-directory))
		     )
		    (group (dir "~/Org/")
				   (auto-mode)
				   (auto-directory))
		    (group (dir "~/Org/notes/")
				   (auto-directory)
				   (auto-mode)))
	  :general
	  (:keymaps 'bufler-list-mode-map "Q" 'kill-this-buffer))

   (use-package hl-prog-extra
	  :commands (hl-prog-extra-mode)
	  :config
	  (setq hl-prog-extra-list
		    (list
		     '("\\<\\(TODO\\|NOTE\\)\\(([^)+]+)\\)?" 0 comment
			   (:weight bold :inherit diff-removed))
		     ;; Match TKs in quotation marks (hl-prog-extra sees them as strings)
		     '("\\(TK\\)+" 0 string '(:weight bold :inherit font-lock-warning-face))
		     ;; Match TKs not in quotation marks
		     '("\\(TK\\)+" 0 nil '(:weight bold :inherit font-lock-warning-face))))
	  (global-hl-prog-extra-mode))

   (use-package xwidget
	  :general
	  (general-define-key :states 'normal :keymaps 'xwidget-webkit-mode-map
						  "j" 'xwidget-webkit-scroll-up-line
						  "k" 'xwidget-webkit-scroll-down-line
						  "gg" 'xwidget-webkit-scroll-top
						  "G" 'xwidget-webkit-scroll-bottom))

   (use-package ansi-term
	  :ensure nil
	  :general
	  (:keymaps 'term-mode-map
			    "<up>" 'term-previous-input
			    "<down>" 'term-next-input))

   ;; https://github.com/oantolin/epithet
   (use-package epithet
	  :ensure nil
	  :config
	  (add-hook 'Info-selection-hook #'epithet-rename-buffer)
	  (add-hook 'help-mode-hook #'epithet-rename-buffer))

   ;; https://github.com/udyantw/most-used-words
   (use-package most-used-words :ensure nil)

#+end_src

#+RESULTS:
: t

* Org Mode
:PROPERTIES:
:CUSTOM_ID: OrgMode-i0ceeqe0d2k0
:END:
** Org Tempo
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgtempo-v0deeqe0d2k0
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC
** Org Agenda
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgAgenda-7zei3vf0d2k0
:END:
 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-tags-column 0
		 org-agenda-block-separator ?─
		 org-agenda-time-grid '((daily today require-timed)
								(600 800 1000 1200 1400 1600 1800 2000)
								" ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
		 org-agenda-current-time-string
		 "◀── now ─────────────────────────────────────────────────"
		 )
 #+END_SRC
** Org Modern
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgModern-ewii3vf0d2k0
:END:
This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. 
- [[https://github.com/minad/org-modern][Org Modern]]

To see it in action, open [[file:./example.org]example.org].

  #+BEGIN_SRC emacs-lisp
	(use-package org-modern
	  :hook (org-mode . global-org-modern-mode)
	  :custom
	  (org-modern-keyword nil)
	  (org-modern-checkbox nil)
	  (org-modern-table nil)
	  )
  #+END_SRC

  #+RESULTS:
  | global-org-modern-mode | org-appear-mode | org-tempo-setup | (closure (t) nil evil-org-mode) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | hl-todo-mode | rainbow-mode |

** Org Load languages
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgloadlanguages-m6eeeqe0d2k0
:END:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))

#+end_src

#+RESULTS:

** Org Appear
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgappear-kffeeqe0d2k0
:END:
#+begin_src emacs-lisp
	(setq org-pretty-entities t)

	(use-package org-appear
	  ;; :commands (org-appear-mode)
	  :hook (org-mode . org-appear-mode)
	  ;; :init
	  ;; (setq org-hide-emphasis-markers t	
	  ;; 		 org-appear-autoemphasis t		
	  ;; 		 org-appear-trigger 'always      
	  ;; 		 org-appear-autoentities t
	  ;; 		 org-appear-autolinks t		
	  ;; 		 org-appear-autosubmarkers t)
	  )
#+end_src

#+RESULTS:
| org-appear-mode | org-tempo-setup | (closure (t) nil evil-org-mode) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | hl-todo-mode | rainbow-mode |

** Org Id
:PROPERTIES:
:CUSTOM_ID: OrgModeOrgId-7kgeeqe0d2k0
:END:
#+begin_src emacs-lisp
  (use-package org-unique-id
	:init (add-hook 'before-save-hook #'org-unique-id-maybe))
#+end_src

#+RESULTS:
: fet/org-add-ids-to-headlines-in-file

* LaTeX
#+BEGIN_SRC emacs-lisp
 (use-package latex ;; This is a weird one. Package is auctex but needs to be managed like this.
	:ensure nil
	:defer t
	:init
	(setq TeX-engine 'xetex ;; Use XeTeX
		  latex-run-command "xetex")

	(setq TeX-parse-self t ; parse on load
		  TeX-auto-save t  ; parse on save
		  ;; Use directories in a hidden away folder for AUCTeX files.
		  TeX-auto-local (concat user-emacs-directory "auctex/auto/")
		  TeX-style-local (concat user-emacs-directory "auctex/style/")

		  TeX-source-correlate-mode t
		  TeX-source-correlate-method 'synctex

		  TeX-show-compilation nil

		  ;; Don't start the Emacs server when correlating sources.
		  TeX-source-correlate-start-server nil

		  ;; Automatically insert braces after sub/superscript in `LaTeX-math-mode'.
		  TeX-electric-sub-and-superscript t
		  ;; Just save, don't ask before each compilation.
		  TeX-save-query nil)

	;; To use pdfview with auctex:
	(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		  TeX-source-correlate-start-server t)
	:general
	(general-define-key
	  :prefix ","
	  :states 'normal
	  :keymaps 'LaTeX-mode-map
	  "" nil
	  "a" '(TeX-command-run-all :which-key "TeX run all")
	  "c" '(TeX-command-master :which-key "TeX-command-master")
	  "c" '(TeX-command-master :which-key "TeX-command-master")
	  "e" '(LaTeX-environment :which-key "Insert environment")
	  "s" '(LaTeX-section :which-key "Insert section")
	  "m" '(TeX-insert-macro :which-key "Insert macro")
	  )

	)

 (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; Standard way

 ;; (use-package company-auctex
 ;;   :after auctex
 ;;   :init
 ;;   (add-to-list 'company-backends 'company-auctex)
 ;;   (company-auctex-init))
#+END_SRC

#+RESULTS:
| TeX-revert-document-buffer |

* PDF Tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
	:config
	(pdf-loader-install))
#+END_SRC

#+RESULTS:
: t

* Footers in =init.el= and =early-init.el=
:PROPERTIES:
:CUSTOM_ID: Footersininitelandearlyinitel-3iheeqe0d2k0
:END:
#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
;;; early-init.el ends here
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
;;; init.el ends here

#+end_src

#+RESULTS:
