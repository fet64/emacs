#+TITLE: Fet64's Emacs Configuration File
#+AUTHOR: Fet64

This is a work in progress...

People who inspire me:
- [[https://github.com/jakebox/jake-emacs/tree/main]]
- [[https://sachachua.com/dotemacs/index.html]]
- [[https://gitlab.com/dwt1/configuring-emacs]]

* MacOS Keyboard Configuration
#+begin_src emacs-lisp
  (setq mac-command-modifier   'meta
	mac-option-modifier         nil
	mac-control-modifier       'control
	mac-right-command-modifier 'super
	mac-right-control-modifier 'hyper)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Elpaca Package Manager
Elpaca package manager
** Quick start
[[https://github.com/progfolio/elpaca]]
|------------------------------------+--------------------+--------------------------------------------------|
| Operation                          | Keys               | Commmands                                        |
|------------------------------------+--------------------+--------------------------------------------------|
| Finding packages                   | M-x elpaca-manager | elpaca-try                                       |
| Trying packages                    | i x                | elpaca-try                                       |
| Fetching package updates           | f x                | elpaca-fetch or elpaca-fetch-all                 |
| Merging updates                    | u x                | elpaca-merge or elpaca-merge-all                 |
| Pulling updates                    | Cu u x             | C-u M-x elpaca-merge or C-u M-x elpaca-merge-all |
| Rebuilding packages                | r x                | elpaca-rebuild                                   |
| Deleting packages                  | d x                | elpaca-delete                                    |
| View package logs                  | l                  | elpaca-log                                       |
| View package statuses              | t                  | elpaca-status                                    |
| Visit package repository directory | v                  | elpaca-visit                                     |
| Visit package build directory      | C-u v              | C-u M-x elpaca-visit                             |
| Browse package website             | b                  | elpaca-browse                                    |
|------------------------------------+--------------------+--------------------------------------------------|



#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
	(add-to-list 'load-path (if (file-exists-p build) build repo))
	(unless (file-exists-p repo)
	  (make-directory repo t)
	  (when (< emacs-major-version 28) (require 'subr-x))
	  (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
		  (progn (message "%s" (buffer-string)) (kill-buffer buffer))
		(error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
	(unless (require 'elpaca-autoloads nil t)
	  (require 'elpaca)
	  (elpaca-generate-autoloads "elpaca" repo)
	  (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
	  (elpaca-use-package-mode)
	  (setq elpaca-use-package-by-default t))
  (elpaca-wait)

#+end_src

* Garbage Collections and Collector
#+begin_src emacs-lisp
  (use-package gcmh
	:diminish gcmh-mode
	:config
	(setq gcmh-idle-delay 5
		  gcmh-high-cons-threshold (* 16 1024 1024)) ; 16mb
	(gcmh-mode 1)
	)

  (add-hook 'emacs-startup-hook
			(lambda ()
			  (setq gc-cons-percentage 0.1)))
  (add-hook 'emacs-startup-hook
			(lambda ()
			  (message "Emacs ready in %s with %d garbage collections."
					   (format "%.2f seconds"
							   (float-time
								(time-subtract after-init-time before-init-time)))
					   gcs-done)))


#+end_src

* Saving customizations
I don't want saved customizations in my init.el file.
Ref: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html]]

#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/emacs-custom.el")
  (load custom-file)

#+end_src

* Load local scripts
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.config/emacs/scripts/")
  (require 'buffer-move)

#+end_src

* Backups, history and trash
By default, Emacs saves backup files in the current directory. These are files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.config/emacs/backups/, where I can find them with find-file if I really need to.

#+begin_src emacs-lisp
  ;; Backup
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))

  ;; History
  (setq savehist-file "~/.config/emacs/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
		'(kill-ring
		  search-ring
		  regexp-search-ring))

  ;; Trash
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

#+end_src

* Evil mode
[[https://github.com/emacs-evil/evil]]

#+begin_src emacs-lisp
  ;; (use-package evil
  ;;   :init
  ;;   (setq evil-want-integration t
  ;; 		evil-want-keybinding nil
  ;; 		evil-vsplit-window-right t
  ;; 		evil-split-window-below t
  ;; 		evil-undo-system 'undo-redo)
  ;;   (evil-mode 1))

  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :config
  ;;   (add-to-list 'evil-collection-mode-list 'help)
  ;;   (evil-collection-init))



#+end_src

#+RESULTS:

* Magit
Magit is a complete text-based user interface to Git.
[[https://magit.vc]]

A very good writeup to get you started using Magit: [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git]]

#+begin_src emacs-lisp
  (use-package transient)
  (use-package magit)

#+end_src

* Org
#+begin_src emacs-lisp
  (require 'org-tempo)

  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)))
#+end_src

* Themes and visual stuff
** All the icons
[[https://github.com/domtronn/all-the-icons.el]]
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

** Doom theme and modeline
Doom themes: [[https://github.com/doomemacs/themes]]

Doom modeline: [[https://github.com/seagle0128/doom-modeline]]

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    ;;(doom-themes-neotree-config)
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
	  doom-modeline-bar-width 5
	  doom-modeline-persp-name t
	  doom-modeline-persp-icon t))

#+end_src

* General Settings (GUI and sane defaults)
** Sane defaults
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)             ;; I like having access to the menu-bar

  (delete-selection-mode 1)     ;; You can select text and delete it by typing
  (electric-indent-mode 1)      ;; Turn off the weird indenting that Emacs does by default
  (electric-pair-mode -1)       ;; turns on the automatic parens pairing, I don't like it

  (global-auto-revert-mode t)   ;; Automatically show changes if the file has changed
  (global-display-line-numbers-mode 1)
  (setq-default display-line-numbers-width 3)
  (global-visual-line-mode t)   ;; Enable truncated lines
  (setq org-edit-src-content-indentation 2) ;; Set src block automatic indent to 2 (which is the default)

  ;; INTERACTION
  (setq use-short-answers t)    ;; y or n suffice when emacs asks for yes or no
  (setq confirm-kill-emacs 'yes-or-no-p)  ;; confirm to quit
  (setq initial-major-mode 'org-mode
	initial-scratch-message ""
	initial-buffer-choice t)

  ;; Window
  (setq frame-resize-pixelwise t)
  (setq ns-pop-up-frames nil)
  (setq window-resize-pixelwise nil)
  ;;(setq split-width-threshold 80)

  ;; Lines
  (setq-default truncate-lines t)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (setq line-move-visual t)

  ;; BELL/WARNING
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; SCROLLING
  (setq scroll-conservatively 101)
  (setq mouse-wheel-follow-mouse 't
		mouse-wheel-progressive-speed nil)
  (setq mac-redisplay-dont-reset-vscroll t
		mac-mouse-wheel-smooth-scroll nil)

  (setq what-cursor-show-names t) ;; improves C-x =

  ;; DIRED
  (setq dired-kill-when-opening-new-dired-buffer t)
#+end_src


** Which-key
[[https://github.com/justbur/emacs-which-key]]

#+begin_src emacs-lisp
  (use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))

#+end_src
